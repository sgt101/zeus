/* Generated By:JavaCC: Do not edit this line. PerformativeParser.java */
package zeus.concepts;

import java.util.*;
import java.io.*;
import zeus.util.*;

public class PerformativeParser implements PerformativeParserConstants {

  final public Performative Message() throws ParseException {
  String type;
  Performative msg;
    jj_consume_token(LBRACKET);
    type = MessageType();
      msg = new Performative(type);
    label_1:
    while (true) {
      MessageParameter(msg);
      switch (jj_nt.kind) {
      case SENDER:
      case RECEIVER:
      case CONTENT:
      case REPLY_WITH:
      case REPLY_BY:
      case IN_REPLY_TO:
      case REPLY_TO:
      case ENVELOPE:
      case LANGUAGE:
      case ONTOLOGY:
      case PROTOCOL:
      case CONVERSATION_ID:
        ;
        break;
      default:
        break label_1;
      }
    }
    jj_consume_token(RBRACKET);
    {if (true) return msg;}
    throw new Error("Missing return statement in function");
  }

  final public String MessageType() throws ParseException {
  Token t = null;
    switch (jj_nt.kind) {
    case ACCEPT:
      t = jj_consume_token(ACCEPT);
      break;
    case AGREE:
      t = jj_consume_token(AGREE);
      break;
    case CANCEL:
      t = jj_consume_token(CANCEL);
      break;
    case CFP:
      t = jj_consume_token(CFP);
      break;
    case CONFIRM:
      t = jj_consume_token(CONFIRM);
      break;
    case DISCONFRIM:
      t = jj_consume_token(DISCONFRIM);
      break;
    case FAILURE:
      t = jj_consume_token(FAILURE);
      break;
    case INFORM:
      t = jj_consume_token(INFORM);
      break;
    case INFORM_IF:
      t = jj_consume_token(INFORM_IF);
      break;
    case INFORM_REF:
      t = jj_consume_token(INFORM_REF);
      break;
    case NOT_UNDERSTOOD:
      t = jj_consume_token(NOT_UNDERSTOOD);
      break;
    case PROPOSE:
      t = jj_consume_token(PROPOSE);
      break;
    case QUERY_IF:
      t = jj_consume_token(QUERY_IF);
      break;
    case QUERY_REF:
      t = jj_consume_token(QUERY_REF);
      break;
    case REFUSE:
      t = jj_consume_token(REFUSE);
      break;
    case REJECT:
      t = jj_consume_token(REJECT);
      break;
    case REQUEST:
      t = jj_consume_token(REQUEST);
      break;
    case REQUEST_WHEN:
      t = jj_consume_token(REQUEST_WHEN);
      break;
    case REQUEST_WHENEVER:
      t = jj_consume_token(REQUEST_WHENEVER);
      break;
    case REQUEST_FORWARD:
      t = jj_consume_token(REQUEST_FORWARD);
      break;
    case SUBSCRIBE:
      t = jj_consume_token(SUBSCRIBE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void MessageParameter(Performative msg) throws ParseException {
   String s = null;
   Token t = null;
   Hashtable table = null;
   Vector receivers = null;
    switch (jj_nt.kind) {
    case SENDER:
      jj_consume_token(SENDER);
      s = AgentName();
     msg.setSender(s);
      break;
    case RECEIVER:
      jj_consume_token(RECEIVER);
      receivers = RecipientExpr();
     msg.setReceivers(receivers);
      break;
    case CONTENT:
      jj_consume_token(CONTENT);
      s = Expression();
     msg.setContent(s);
      break;
    case REPLY_TO:
      jj_consume_token(REPLY_TO);
      s = Expression();
     // added by simon for 2.0/1.1? 
        msg.setReplyTo (s);
      break;
    case REPLY_WITH:
      jj_consume_token(REPLY_WITH);
      s = Expression();
     msg.setReplyWith(s);
      break;
    case REPLY_BY:
      jj_consume_token(REPLY_BY);
      t = jj_consume_token(DATE_TIME);
     msg.setReplyBy(t.image);
      break;
    case IN_REPLY_TO:
      jj_consume_token(IN_REPLY_TO);
      s = Expression();
     msg.setInReplyTo(s);
      break;
    case ENVELOPE:
      jj_consume_token(ENVELOPE);
      table = KeyValuePairList();
     msg.setEnvelope(table);
      break;
    case LANGUAGE:
      jj_consume_token(LANGUAGE);
      s = Expression();
     msg.setLanguage(s);
      break;
    case ONTOLOGY:
      jj_consume_token(ONTOLOGY);
      s = Expression();
     msg.setOntology(s);
      break;
    case PROTOCOL:
      jj_consume_token(PROTOCOL);
      t = jj_consume_token(WORD);
     msg.setProtocol(t.image);
      break;
    case CONVERSATION_ID:
      jj_consume_token(CONVERSATION_ID);
      s = Expression();
     msg.setConversationId(s);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String Expression() throws ParseException {
   String s = "";
   Token t = null;
   String s1;
    switch (jj_nt.kind) {
    case WORD:
      t = jj_consume_token(WORD);
      s = t.image;
      break;
    case LITERAL:
      t = jj_consume_token(LITERAL);
     s = Misc.literalToString(t.image);
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
      s = t.image;
      break;
    case REAL:
      t = jj_consume_token(REAL);
      s = t.image;
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      label_2:
      while (true) {
        s1 = Expression();
        s += " " + s1;
        switch (jj_nt.kind) {
        case LBRACKET:
        case WORD:
        case INTEGER:
        case REAL:
        case LITERAL:
          ;
          break;
        default:
          break label_2;
        }
      }
      jj_consume_token(RBRACKET);
     s = "(" + s + ")";
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return s.trim();}
    throw new Error("Missing return statement in function");
  }

  final public Hashtable KeyValuePairList() throws ParseException {
   Hashtable table = new Hashtable();
   String value = null;
   Token t;
    jj_consume_token(LBRACKET);
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case LBRACKET:
        ;
        break;
      default:
        break label_3;
      }
      jj_consume_token(LBRACKET);
      t = jj_consume_token(WORD);
      value = Expression();
      jj_consume_token(RBRACKET);
         table.put(t.image,value);
    }
    jj_consume_token(RBRACKET);
      {if (true) return table;}
    throw new Error("Missing return statement in function");
  }

  final public Vector RecipientExpr() throws ParseException {
   Vector result = new Vector();
   String name = null;
    switch (jj_nt.kind) {
    case WORD:
      name = AgentName();
      result.addElement(name);
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      label_4:
      while (true) {
        name = AgentName();
         result.addElement(name);
        switch (jj_nt.kind) {
        case WORD:
          ;
          break;
        default:
          break label_4;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String AgentName() throws ParseException {
   String s = null;
   Token t = null;
    /**** good 'ol fashioned zeus */
       t = jj_consume_token(WORD);
      s = t.image;
    switch (jj_nt.kind) {
    case 52:
      jj_consume_token(52);
      t = jj_consume_token(WORD);
         s += "@" + t.image;
      break;
    default:
      ;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  public PerformativeParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;

  public PerformativeParser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new PerformativeParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public PerformativeParser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new PerformativeParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public PerformativeParser(PerformativeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  public void ReInit(PerformativeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
