/* Generated By:JavaCC: Do not edit this line. FIPAParserTokenManager.java */
package zeus.concepts;
import java.util.*;
import java.io.*;
import zeus.util.*;

public class FIPAParserTokenManager implements FIPAParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x127f0001fffff00L) != 0L || (active1 & 0x3c0005L) != 0L)
         {
            jjmatchedKind = 89;
            return 139;
         }
         if ((active1 & 0x4fe0L) != 0L)
         {
            jjmatchedKind = 89;
            return 103;
         }
         if ((active0 & 0xfed80fffe0000000L) != 0L || (active1 & 0x1c0001aL) != 0L)
         {
            jjmatchedKind = 89;
            return 66;
         }
         return -1;
      case 1:
         if ((active1 & 0x4700L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
            return 121;
         }
         if ((active0 & 0xb40000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
            return 65;
         }
         if ((active0 & 0xfed80ff4a0000000L) != 0L || (active1 & 0x1c008faL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x127f0001fffff00L) != 0L || (active1 & 0x3c0005L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
            return 139;
         }
         return -1;
      case 2:
         if ((active0 & 0xb40000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
            return 64;
         }
         if ((active0 & 0x100000000800L) != 0L)
            return 139;
         if ((active0 & 0x124e0001ffff700L) != 0L || (active1 & 0x3c0004L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
            return 139;
         }
         if ((active0 & 0xfedb0ff4a0000000L) != 0L || (active1 & 0x1c04ffbL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x12460001ffbf700L) != 0L || (active1 & 0x380000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
            return 139;
         }
         if ((active0 & 0xfedb8fffe0040000L) != 0L || (active1 & 0x1c44fffL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x200L) != 0L)
            return 139;
         if ((active0 & 0x4000040000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 1;
         if ((active0 & 0xbedb8bffe0040000L) != 0L || (active1 & 0x1c44f7fL) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x12460001ffbf500L) != 0L || (active1 & 0x380000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
            return 139;
         }
         return -1;
      case 5:
         if ((active0 & 0x4000000438400L) != 0L || (active1 & 0x100000L) != 0L)
            return 139;
         if ((active0 & 0x8010000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 1;
         if ((active0 & 0x12040001f887100L) != 0L || (active1 & 0x280000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 5;
            }
            return 139;
         }
         if ((active0 & 0x3ecbabffe0340000L) != 0L || (active1 & 0x1c44e7fL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 5;
            }
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0xf085000L) != 0L)
            return 139;
         if ((active0 & 0x120400010002000L) != 0L || (active1 & 0x280000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 6;
            }
            return 139;
         }
         if ((active0 & 0x20000000L) != 0L)
            return 1;
         if ((active0 & 0x3ecfabffc0b70100L) != 0L || (active1 & 0x1c44e7fL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 6;
            }
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x10002000L) != 0L || (active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
            return 139;
         }
         if ((active0 & 0x3cefabff4ea70100L) != 0L || (active1 & 0x1c44e77L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x100400000000000L) != 0L || (active1 & 0x80000L) != 0L)
            return 139;
         if ((active0 & 0x200000080100000L) != 0L || (active1 & 0x8L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x10000000L) != 0L)
            return 139;
         if ((active0 & 0x44001fa40210000L) != 0L || (active1 & 0x1800010L) != 0L)
            return 1;
         if ((active0 & 0x2000L) != 0L || (active1 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 8;
            }
            return 139;
         }
         if ((active0 & 0x38afaa050e860100L) != 0L || (active1 & 0x444e67L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 8;
            }
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x28a7a2050e840100L) != 0L || (active1 & 0x444e67L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x2000L) != 0L || (active1 & 0x200000L) != 0L)
            return 139;
         if ((active0 & 0x1008080000020000L) != 0L || (active1 & 0x1800000L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x80000100000000L) != 0L || (active1 & 0x400040L) != 0L)
            return 1;
         if ((active0 & 0x2827a2040e840100L) != 0L || (active1 & 0x44e27L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000000406000000L) != 0L || (active1 & 0x200L) != 0L)
            return 1;
         if ((active0 & 0x827a20008840100L) != 0L || (active1 & 0x44c27L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 11;
            }
            return 1;
         }
         return -1;
      case 12:
         if ((active0 & 0x827a2000c840100L) != 0L || (active1 & 0x44c27L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x825a2000c800100L) != 0L || (active1 & 0x44c27L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 13;
            return 1;
         }
         if ((active0 & 0x2000000040000L) != 0L)
            return 1;
         return -1;
      case 14:
         if ((active0 & 0x825a20004000000L) != 0L || (active1 & 0x4c01L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 14;
            return 1;
         }
         if ((active0 & 0x8800100L) != 0L || (active1 & 0x40026L) != 0L)
            return 1;
         return -1;
      case 15:
         if ((active0 & 0x825800000000000L) != 0L || (active1 & 0x4801L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 15;
            return 1;
         }
         if ((active0 & 0x220004000000L) != 0L || (active1 & 0x400L) != 0L)
            return 1;
         return -1;
      case 16:
         if ((active0 & 0x825800000000000L) != 0L || (active1 & 0x4801L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      case 17:
         if ((active0 & 0x21800000000000L) != 0L || (active1 & 0x4801L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 17;
            return 1;
         }
         if ((active0 & 0x804000000000000L) != 0L)
            return 1;
         return -1;
      case 18:
         if ((active0 & 0x1800000000000L) != 0L || (active1 & 0x4801L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 18;
            return 1;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 1;
         return -1;
      case 19:
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x4801L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 19;
            return 1;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 1;
         return -1;
      case 20:
         if ((active1 & 0x4801L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 20;
            return 1;
         }
         if ((active0 & 0x800000000000L) != 0L)
            return 1;
         return -1;
      case 21:
         if ((active1 & 0x4801L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 21;
            return 1;
         }
         return -1;
      case 22:
         if ((active1 & 0x4801L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 22;
            return 1;
         }
         return -1;
      case 23:
         if ((active1 & 0x4800L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 23;
            return 1;
         }
         if ((active1 & 0x1L) != 0L)
            return 1;
         return -1;
      case 24:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 24;
            return 1;
         }
         if ((active1 & 0x800L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 58:
         return jjMoveStringLiteralDfa1_0(0xfed80fffe0000000L, 0x1c0001aL);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4fe0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2a00000000300L, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000002000L, 0x200000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000000080000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xfc00000L, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x24500010000000L, 0x100000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4700L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000004400L, active1, 0xa2L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x20080000100L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2451100fc00000L, active1, 0x3c0000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000800L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000200L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400002000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0x800000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x3400800000000000L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000038000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8004000041000L, active1, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x82008000000000L, active1, 0x1000009L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000b40080000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000020000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000000000000L, active1, 0x804L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10300000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000L, active1, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xb004042000000000L, active1, 0x900500L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40200b60300000L, active1, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x438000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x80L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x15400001400L, active1, 0x400000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x500020080080000L, active1, 0L);
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 139);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000f000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8a0008000000200L, active1, 0x1200808L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000002000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 139);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000040000L, active1, 0x44010L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200000000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x800400040000L, active1, 0x40004L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x811000000000000L, active1, 0x802L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10040002400L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000000000L, active1, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x800300L, active1, 0x200200L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80120L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000004000L, active1, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2082220a0000000L, active1, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80008000038000L, active1, 0x1000008L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x4100000b00080000L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000000300000L, active1, 0x104000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x400001L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000f400000L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20001000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000000L, active1, 0x10L);
      case 62:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 1);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200800000000000L, active1, 0x4020L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000010800000L, active1, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x40104L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 139);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x10a40104f000400L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x1002000000000L, active1, 0xa00000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x420000000001000L, active1, 0x402L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0xb00000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x14000082000L, active1, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80400038000L, active1, 0x1L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x80040L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10208080000000L, active1, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000044000L, active1, 0x200L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x40020000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000300000L, active1, 0L);
      case 62:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 1);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x401L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000010000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 139);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 1);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x810a04a0000000L, active1, 0x40004L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000040000000L, active1, 0x200008L);
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 139);
         return jjMoveStringLiteralDfa6_0(active0, 0x400005000000000L, active1, 0x400002L);
      case 109:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000030000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000042000L, active1, 0x4010L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2108000010005000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x80200000f080000L, active1, 0xa20L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x800100L, active1, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x800000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0xb00000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000b00830100L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x220L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x800012L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x42408000000000L, active1, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 139);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 139);
         return jjMoveStringLiteralDfa7_0(active0, 0x3020800000000000L, active1, 0x80000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x600210010100000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 139);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000080000000L, active1, 0x41L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000000L, active1, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000400000000L, active1, 0x800L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x80020000200000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x8080000000000L, active1, 0x244404L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000e000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000e000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x60L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x210000000L, active1, 0x2L);
      case 99:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0x40004L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 139);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000040240000L, active1, 0L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000000L, active1, 0xc00000L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x12000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x810000000000L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800008000000000L, active1, 0x1000800L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000001000800100L, active1, 0x4000L);
      case 114:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 139);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000020000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000a0000000000L, active1, 0x1L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x481000800000000L, active1, 0x200000L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0x600L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0x20L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 139);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 1);
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x280000020000L, active1, 0xa00000L);
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 1);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 103:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8a000100000000L, active1, 0x400000L);
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000002L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      case 111:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000842100L, active1, 0x40804L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000800000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 1);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x800400000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0x420L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0xa0000000000000L, active1, 0x400042L);
      case 102:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 17, 1);
         break;
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 60, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40004L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 139);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x4200000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8800100L, active1, 0x1L);
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 85, 139);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 1);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 87, 1);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 88, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x800020100000000L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0x2L);
      case 62:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(10, 70, 1);
         break;
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000006000000L, active1, 0x200L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x800100L, active1, 0x40004L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L, active1, 0x21L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 55, 1);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 86, 1);
         return jjMoveStringLiteralDfa11_0(active0, 0x24000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2002200400040000L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(11, 73, 1);
         break;
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2200000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L, active1, 0L);
      case 111:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(11, 34, 1);
         return jjMoveStringLiteralDfa12_0(active0, 0x20000840100L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 61, 1);
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0x40005L);
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L, active1, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40004L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000040000L, active1, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x824000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000800100L, active1, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000800100L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 18, 1);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x20200000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 49, 1);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000000L, active1, 0x44004L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000008000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x420L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(14, 69, 1);
         break;
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(14, 27, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x200004000000L, active1, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000000L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x5020000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(14, 23, 1);
         break;
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(14, 66, 1);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(14, 82, 1);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(14, 65, 1);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(15, 74, 1);
         break;
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 41, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x800800000000000L, active1, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(15, 26, 1);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 45, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1L);
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000000L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x5000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 59, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x1L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 50, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000L, active1, 0x1L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 53, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x800L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 48, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x4000L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 47, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x801L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa22_0(active1, 0x801L);
      case 116:
         return jjMoveStringLiteralDfa22_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
private final int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1);
      return 22;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa23_0(active1, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa23_0(active1, 0x801L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1);
}
private final int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1);
      return 23;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(23, 64, 1);
         return jjMoveStringLiteralDfa24_0(active1, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa24_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1);
}
private final int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1);
      return 24;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(24, 75, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa25_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1);
}
private final int jjMoveStringLiteralDfa25_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(23, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1);
      return 25;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(25, 78, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 139;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 139:
                  if ((0xfffffcfaffffc9ffL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 56;
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 64:
               case 1:
                  if ((0xfffffcfaffffc9ffL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 65:
                  if ((0xfffffcfaffffc9ffL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 103:
                  if ((0xfffffcfaffffc9ffL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 137;
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 132;
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 126;
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0xfffffcfaffffc9ffL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 66:
                  if ((0xfffffcfaffffc9ffL & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 0:
                  if ((0xfc00fcf2ffffc9ffL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(1);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 9);
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddTwoStates(5, 3);
                  }
                  else if (curChar == 60)
                     jjAddStates(13, 20);
                  else if (curChar == 58)
                     jjAddStates(21, 22);
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 48)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(3);
                  }
                  break;
               case 2:
                  if (curChar != 48)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(5, 3);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(5, 3);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(23, 25);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 33:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 35:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 36:
                  if (curChar == 34 && kind > 94)
                     kind = 94;
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 39:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 43:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 52:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 57:
                  if (curChar == 58)
                     jjAddStates(21, 22);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 9);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if (curChar == 46)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar == 46)
                     jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar == 46)
                     jjCheckNAdd(83);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(83);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (curChar != 46)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(30, 32);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(30, 32);
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(89, 11);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 91);
                  break;
               case 92:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(93, 11);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 96:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(97);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(97, 11);
                  break;
               case 98:
                  if (curChar == 60)
                     jjAddStates(13, 20);
                  break;
               case 99:
                  if (curChar == 62 && kind > 76)
                     kind = 76;
                  break;
               case 108:
                  if (curChar == 62 && kind > 77)
                     kind = 77;
                  break;
               case 117:
                  if (curChar == 62 && kind > 79)
                     kind = 79;
                  break;
               case 122:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 127:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 62 && kind > 81)
                     kind = 81;
                  break;
               case 133:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 138:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 139:
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 64:
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 103:
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 115;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 111;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 106;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 121:
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 136;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 131;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 125;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 66:
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 74;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 0:
                  if ((0xfffffffffffffffeL & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAdd(1);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(36, 41);
                  break;
               case 1:
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 11:
                  if ((0x5000000050L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 21:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 34:
                  if (curChar == 92)
                     jjAddStates(44, 46);
                  break;
               case 35:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(36, 41);
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 48:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 53:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 115 && kind > 80)
                     kind = 80;
                  break;
               case 59:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 67:
                  if (curChar == 83 && kind > 80)
                     kind = 80;
                  break;
               case 68:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 91:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 95:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 100:
                  if (curChar == 101)
                     jjCheckNAdd(99);
                  break;
               case 101:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 104:
                  if (curChar == 69)
                     jjCheckNAdd(99);
                  break;
               case 105:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 109:
                  if (curChar == 116)
                     jjCheckNAdd(108);
                  break;
               case 110:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 84)
                     jjCheckNAdd(108);
                  break;
               case 114:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 118:
                  if (curChar == 101)
                     jjCheckNAdd(117);
                  break;
               case 119:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 123:
                  if (curChar == 69)
                     jjCheckNAdd(117);
                  break;
               case 124:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 129:
                  if (curChar == 116)
                     jjCheckNAdd(128);
                  break;
               case 130:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 134:
                  if (curChar == 84)
                     jjCheckNAdd(128);
                  break;
               case 135:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 139:
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 64:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 65:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 103:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 121:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 66:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(1);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 139 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   77, 78, 84, 85, 90, 91, 94, 95, 11, 14, 33, 34, 36, 103, 107, 112, 
   116, 122, 127, 133, 138, 66, 75, 7, 8, 11, 33, 34, 38, 36, 86, 87, 
   11, 94, 95, 11, 42, 43, 49, 50, 54, 55, 9, 10, 35, 37, 39, 44, 
   45, 46, 47, 51, 52, 88, 89, 92, 93, 96, 97, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", 
"\141\143\143\145\160\164\55\160\162\157\160\157\163\141\154", "\141\147\162\145\145", "\143\141\156\143\145\154", "\143\146\160", 
"\143\157\156\146\151\162\155", "\144\151\163\143\157\156\146\151\162\155", "\146\141\151\154\165\162\145", 
"\151\156\146\157\162\155", "\151\156\146\157\162\155\55\151\146", 
"\151\156\146\157\162\155\55\162\145\146", "\156\157\164\55\165\156\144\145\162\163\164\157\157\144", 
"\160\162\157\160\157\163\145", "\161\165\145\162\171\55\151\146", "\161\165\145\162\171\55\162\145\146", 
"\162\145\146\165\163\145", "\162\145\152\145\143\164\55\160\162\157\160\157\163\141\154", 
"\162\145\161\165\145\163\164", "\162\145\161\165\145\163\164\55\167\150\145\156", 
"\162\145\161\165\145\163\164\55\167\150\145\156\145\166\145\162", "\162\145\161\165\145\163\164\55\146\157\162\167\141\162\144", 
"\163\165\142\163\143\162\151\142\145", "\72\163\145\156\144\145\162", "\72\162\145\143\145\151\166\145\162", 
"\72\143\157\156\164\145\156\164", "\72\162\145\160\154\171\55\167\151\164\150", 
"\72\162\145\160\154\171\55\142\171", "\72\151\156\55\162\145\160\154\171\55\164\157", 
"\72\162\145\160\154\171\55\164\157", "\72\145\156\166\145\154\157\160\145", "\72\154\141\156\147\165\141\147\145", 
"\72\157\156\164\157\154\157\147\171", "\72\160\162\157\164\157\143\157\154", "\72\145\156\143\157\144\151\156\147", 
"\72\143\157\156\166\145\162\163\141\164\151\157\156\55\151\144", "\72\156\141\155\145", "\72\141\144\144\162\145\163\163\145\163", 
"\163\145\164", "\141\147\145\156\164\55\151\144\145\156\164\151\146\151\145\162", 
"\163\145\161\165\145\156\143\145", 
"\141\155\163\55\141\147\145\156\164\55\144\145\163\143\162\151\160\164\151\157\156", 
"\144\146\55\141\147\145\156\164\55\144\145\163\143\162\151\160\164\151\157\156", "\141\160\55\144\145\163\143\162\151\160\164\151\157\156", 
"\163\145\141\162\143\150\55\143\157\156\163\164\162\141\151\156\164\163", "\72\157\167\156\145\162\163\150\151\160", "\72\163\164\141\164\145", 
"\163\145\162\166\151\143\145\55\144\145\163\143\162\151\160\164\151\157\156", "\72\163\145\162\166\151\143\145\163", 
"\72\160\162\157\160\145\162\164\151\145\163", "\160\162\157\160\145\162\164\171", "\72\144\171\156\141\155\151\143", 
"\72\155\157\142\151\154\151\164\171", "\72\164\162\141\156\163\160\157\162\164\55\160\162\157\146\151\154\145", 
"\72\155\141\170\55\144\145\160\164\150", "\72\155\141\170\55\162\145\163\165\154\164\163", "\72\164\171\160\145", 
"\72\166\141\154\165\145", 
"\141\160\55\164\162\141\156\163\160\157\162\164\55\144\145\163\143\162\151\160\164\151\157\156", "\72\141\166\141\151\154\141\142\154\145\55\155\164\160\163", 
"\155\164\160\55\144\145\163\143\162\151\160\164\151\157\156", "\72\160\162\157\146\151\154\145", "\72\155\164\160\55\156\141\155\145", 
"\74\141\154\151\141\163\137\141\144\144\162\145\163\163\76", "\74\172\145\165\163\137\156\141\155\145\76", "\74\141\151\144\76", 
"\74\57\141\151\144\76", "\74\57\172\145\165\163\137\156\141\155\145\76", 
"\74\57\141\154\151\141\163\137\141\144\144\162\145\163\163\76", 
"\74\164\162\141\156\163\160\157\162\164\137\143\157\156\146\151\147\165\162\141\164\151\157\156\76", null, null, 
"\74\57\164\162\141\156\163\160\157\162\164\137\143\157\156\146\151\147\165\162\141\164\151\157\156\76", null, null, null, 
"\147\145\164\55\144\145\163\143\162\151\160\164\151\157\156", "\162\145\147\151\163\164\145\162", "\163\145\141\162\143\150", 
"\144\145\162\145\147\151\163\164\145\162", "\72\157\156\164\157\154\157\147\151\145\163", 
"\72\154\141\156\147\165\141\147\145\163", "\72\160\162\157\164\157\143\157\154\163", null, null, null, null, null, null, 
null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x7fffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
private SimpleCharStream input_stream;
private final int[] jjrounds = new int[139];
private final int[] jjstateSet = new int[278];
protected char curChar;
public FIPAParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public FIPAParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 139; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
