/* Generated By:JavaCC: Do not edit this line. PerformativeParserTokenManager.java */
package zeus.concepts;
import java.util.*;
import java.io.*;
import zeus.util.*;

public class PerformativeParserTokenManager implements PerformativeParserConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffffff00L) != 0L)
         {
            jjmatchedKind = 43;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x7ffffffff00L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fffffff700L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x800L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x7fffffff700L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x5fffffff500L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x20000000200L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x5ffffbc7100L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 5;
            }
            return 1;
         }
         if ((active0 & 0x438400L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x5ffd0b72100L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 6;
            }
            return 1;
         }
         if ((active0 & 0x2f085000L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x5ff5ea72100L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x80100000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x5050e862100L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0xfa50210000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x40000022000L) != 0L)
            return 1;
         if ((active0 & 0x1050e840100L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x1040e840100L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 10;
            return 1;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 1;
         return -1;
      case 11:
         if ((active0 & 0x10008840100L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 11;
            }
            return 1;
         }
         if ((active0 & 0x406000000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x1000c840100L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x1000c800100L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 13;
            return 1;
         }
         if ((active0 & 0x40000L) != 0L)
            return 1;
         return -1;
      case 14:
         if ((active0 & 0x10004000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 14;
            return 1;
         }
         if ((active0 & 0x8800100L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x7ffe0000000L);
      case 64:
         return jjStopAtPos(0, 52);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c00L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x38000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xfc00000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000004400L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10080000100L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100fc00000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400002000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000038000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000041000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xb40080000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10300000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x22000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xb60300000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x438000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x5400001400L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10080080000L);
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 1);
         break;
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0xf000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000200L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x400040000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40002400L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x800300L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x120a0000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000038000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0xb00080000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xf400000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10800000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x104f000400L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0xb00000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000082000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40400038000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x8080000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x44000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x504a0000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000000L);
      case 109:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x30000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x42000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10005000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0xf080000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x800100L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0xb00000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0xb00830100L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 1);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10100000L);
      case 109:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000200000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0xe000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0xe000000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x210000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x40240000L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x12000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000800100L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x50000000000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 1);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000020000L);
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 1);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 1);
         break;
      case 111:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 1);
         break;
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x842100L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x6000000L);
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      case 102:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 17, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x6000000L);
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8800100L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x10100000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x6000000L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 32, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x800100L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x400040000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 111:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(11, 34, 1);
         return jjMoveStringLiteralDfa12_0(active0, 0x10000840100L);
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x800100L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x800100L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 18, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(14, 27, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(14, 23, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 40, 1);
         break;
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(15, 26, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 56;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfc00dcf2ffffc9ffL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(1);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 7);
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddTwoStates(5, 3);
                  }
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 48)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(3);
                  }
                  break;
               case 1:
                  if ((0xfffffcfaffffc9ffL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar != 48)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(5, 3);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(5, 3);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(11, 13);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 33:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 35:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 36:
                  if (curChar == 34 && kind > 47)
                     kind = 47;
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 39:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 7);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar != 46)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(18, 20);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(18, 20);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(47, 11);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(51, 11);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 11:
                  if ((0x5000000050L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 21:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 34:
                  if (curChar == 92)
                     jjAddStates(26, 28);
                  break;
               case 35:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(1);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   42, 43, 48, 49, 52, 53, 11, 14, 33, 34, 36, 7, 8, 11, 33, 34, 
   38, 36, 44, 45, 11, 52, 53, 11, 9, 10, 35, 37, 39, 46, 47, 50, 
   51, 54, 55, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", 
"\141\143\143\145\160\164\55\160\162\157\160\157\163\141\154", "\141\147\162\145\145", "\143\141\156\143\145\154", "\143\146\160", 
"\143\157\156\146\151\162\155", "\144\151\163\143\157\156\146\151\162\155", "\146\141\151\154\165\162\145", 
"\151\156\146\157\162\155", "\151\156\146\157\162\155\55\151\146", 
"\151\156\146\157\162\155\55\162\145\146", "\156\157\164\55\165\156\144\145\162\163\164\157\157\144", 
"\160\162\157\160\157\163\145", "\161\165\145\162\171\55\151\146", "\161\165\145\162\171\55\162\145\146", 
"\162\145\146\165\163\145", "\162\145\152\145\143\164\55\160\162\157\160\157\163\141\154", 
"\162\145\161\165\145\163\164", "\162\145\161\165\145\163\164\55\167\150\145\156", 
"\162\145\161\165\145\163\164\55\167\150\145\156\145\166\145\162", "\162\145\161\165\145\163\164\55\146\157\162\167\141\162\144", 
"\163\165\142\163\143\162\151\142\145", "\72\163\145\156\144\145\162", "\72\162\145\143\145\151\166\145\162", 
"\72\143\157\156\164\145\156\164", "\72\162\145\160\154\171\55\167\151\164\150", 
"\72\162\145\160\154\171\55\142\171", "\72\151\156\55\162\145\160\154\171\55\164\157", 
"\72\162\145\160\154\171\55\164\157", "\72\145\156\166\145\154\157\160\145", "\72\154\141\156\147\165\141\147\145", 
"\72\157\156\164\157\154\157\147\171", "\72\160\162\157\164\157\143\157\154", 
"\72\143\157\156\166\145\162\163\141\164\151\157\156\55\151\144", "\72\156\141\155\145", "\72\141\144\144\162\145\163\163\145\163", null, null, 
null, null, null, null, null, null, null, "\100", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x10ffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[56];
private final int[] jjstateSet = new int[112];
protected char curChar;
public PerformativeParserTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PerformativeParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 56; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
