/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package zeus.concepts;
import java.util.*;
import java.io.*;
import java.lang.reflect.*;
import zeus.util.*;
import zeus.concepts.fn.*;
import zeus.generator.code.*;
import zeus.generator.*;
import zeus.rete.Action;
import zeus.rete.Pattern;
import zeus.rete.Rule;
import zeus.rete.ReteFact;

public class ParserTokenManager implements ParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000000L) != 0L)
            return 77;
         if ((active0 & 0x400140L) != 0L)
            return 2;
         if ((active0 & 0x4000000000L) != 0L)
            return 85;
         if ((active0 & 0x8000000000L) != 0L)
            return 18;
         if ((active0 & 0x140000000000L) != 0L || (active1 & 0x30000000000000L) != 0L || (active2 & 0xff9800fffff00000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            jjmatchedKind = 209;
            return 16;
         }
         if ((active0 & 0x80000000000L) != 0L || (active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 209;
            return 9;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x40000000000L) != 0L || (active2 & 0x200000000L) != 0L)
            return 16;
         if ((active0 & 0x180000000000L) != 0L || (active1 & 0x30000000000000L) != 0L || (active2 & 0xff9800fdfff80000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 1;
            return 16;
         }
         return -1;
      case 2:
         if ((active0 & 0x180000000000L) != 0L || (active1 & 0x30000000000000L) != 0L || (active2 & 0xff9800fdfde80000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 2;
            return 16;
         }
         if ((active2 & 0x2100000L) != 0L)
            return 16;
         return -1;
      case 3:
         if ((active0 & 0x180000000000L) != 0L || (active1 & 0x10000000000000L) != 0L || (active2 & 0xe484080000L) != 0L)
            return 16;
         if ((active1 & 0x20000000000000L) != 0L || (active2 & 0xff98001979e00000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 209;
               jjmatchedPos = 3;
            }
            return 16;
         }
         return -1;
      case 4:
         if ((active2 & 0x960000000L) != 0L)
            return 16;
         if ((active1 & 0x20000000000000L) != 0L || (active2 & 0xff98005019e00000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 209;
               jjmatchedPos = 4;
            }
            return 16;
         }
         return -1;
      case 5:
         if ((active1 & 0x20000000000000L) != 0L || (active2 & 0xff98000049c00000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 209;
               jjmatchedPos = 5;
            }
            return 16;
         }
         if ((active2 & 0x5010200000L) != 0L)
            return 16;
         return -1;
      case 6:
         if ((active2 & 0xff98000000400000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 209;
               jjmatchedPos = 6;
            }
            return 16;
         }
         if ((active1 & 0x20000000000000L) != 0L || (active2 & 0x49800000L) != 0L)
            return 16;
         return -1;
      case 7:
         if ((active2 & 0xff98000000400000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 7;
            return 16;
         }
         return -1;
      case 8:
         if ((active2 & 0xff98000000400000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 209;
               jjmatchedPos = 8;
            }
            return 16;
         }
         return -1;
      case 9:
         if ((active2 & 0xff98000000400000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 209;
               jjmatchedPos = 9;
            }
            return 16;
         }
         return -1;
      case 10:
         if ((active2 & 0xff98000000400000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 10;
            return 16;
         }
         return -1;
      case 11:
         if ((active2 & 0x80000000400000L) != 0L)
            return 16;
         if ((active2 & 0xff18000000000000L) != 0L || (active3 & 0x7fcfL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 11;
            return 16;
         }
         return -1;
      case 12:
         if ((active2 & 0xff18000000000000L) != 0L || (active3 & 0x3fcdL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 12;
            return 16;
         }
         if ((active3 & 0x4002L) != 0L)
            return 16;
         return -1;
      case 13:
         if ((active2 & 0x8010000000000000L) != 0L)
            return 16;
         if ((active2 & 0x7f08000000000000L) != 0L || (active3 & 0x3fcdL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 13;
            return 16;
         }
         return -1;
      case 14:
         if ((active2 & 0x8000000000000L) != 0L || (active3 & 0x1L) != 0L)
            return 16;
         if ((active2 & 0x7f00000000000000L) != 0L || (active3 & 0x3fccL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 14;
            return 16;
         }
         return -1;
      case 15:
         if ((active2 & 0x3f00000000000000L) != 0L || (active3 & 0x1fccL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 15;
            return 16;
         }
         if ((active2 & 0x4000000000000000L) != 0L || (active3 & 0x2000L) != 0L)
            return 16;
         return -1;
      case 16:
         if ((active2 & 0x3f00000000000000L) != 0L || (active3 & 0x1fccL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 16;
            return 16;
         }
         return -1;
      case 17:
         if ((active3 & 0x1000L) != 0L)
            return 16;
         if ((active2 & 0x3f00000000000000L) != 0L || (active3 & 0xfccL) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 17;
            return 16;
         }
         return -1;
      case 18:
         if ((active2 & 0x1f00000000000000L) != 0L || (active3 & 0x744L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 18;
            return 16;
         }
         if ((active2 & 0x2000000000000000L) != 0L || (active3 & 0x888L) != 0L)
            return 16;
         return -1;
      case 19:
         if ((active2 & 0xa00000000000000L) != 0L || (active3 & 0x200L) != 0L)
            return 16;
         if ((active2 & 0x1500000000000000L) != 0L || (active3 & 0x544L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 19;
            return 16;
         }
         return -1;
      case 20:
         if ((active2 & 0x1000000000000000L) != 0L || (active3 & 0x444L) != 0L)
            return 16;
         if ((active2 & 0x500000000000000L) != 0L || (active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 20;
            return 16;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L, 0x0L, 0x0L);
      case 37:
         return jjStopAtPos(0, 23);
      case 38:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 31);
      case 41:
         return jjStopAtPos(0, 32);
      case 42:
         return jjStopAtPos(0, 21);
      case 43:
         return jjStopAtPos(0, 19);
      case 44:
         return jjStopAtPos(0, 35);
      case 45:
         return jjStopAtPos(0, 20);
      case 46:
         return jjStartNfaWithStates_0(0, 39, 18);
      case 47:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x0L, 0x0L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0xffffe01000000000L, 0xffcfffffffffffffL, 0x67ff000007ffffL, 0x30L);
      case 60:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x20000004000L, 0x0L, 0x0L, 0x0L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x10000002000L, 0x0L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L, 0x0L, 0x0L);
      case 63:
         return jjStartNfaWithStates_0(0, 37, 77);
      case 64:
         return jjStartNfaWithStates_0(0, 38, 85);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x5518000000000000L, 0x1545L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xaa80000000000000L, 0x6a8aL);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L, 0x0L, 0x0L);
      case 94:
         return jjStopAtPos(0, 24);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x82000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8800000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x800000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x60000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x6008000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1004400000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x80000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 33);
      case 124:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 34);
      case 126:
         return jjStopAtPos(0, 28);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 45:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 58:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 61:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 62:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x5518000000000000L, active3, 0x1545L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xaa80000000000000L, active3, 0x6a8aL);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x48L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x438200000000000L, active1, 0x802800L, active2, 0x408000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100000000000000L, active1, 0xa000248012a0000L, active2, 0x1000010L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000010000002L, active2, 0x120000000000L, active3, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x22000040000000L, active2, 0x600c480000L, active3, 0L);
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2008008000000000L, active2, 0x10000000081L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000080000000000L, active1, 0x80000000000L, active2, 0x40100000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0xc040a0000c000080L, active2, 0x200080000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x4000L, active2, 0x80000f100L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x200000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0x800L, active3, 0L);
      case 111:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 161, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1010500000000000L, active2, 0x2000010100000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000000000000000L, active1, 0x400010080050501L, active2, 0x5000400000048L, active3, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200800000000000L, active1, 0x500009000L, active2, 0x60070400L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40022400200L, active2, 0x20000000200224L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x81000000000000L, active1, 0x84000000000004L, active2, 0x800000000002L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000100000L, active2, 0x2000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x1000000000000L, active2, 0x40000000000000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L);
      case 124:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0xaa80000000000000L, active3, 0x6a8aL);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x5518000000000000L, active3, 0x1545L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x840400000000000L, active1, 0x14080000000404L, active2, 0x406600000004aL, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x420000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 49);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400010000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200880000000000L, active1, 0x101000610001000L, active2, 0x4109040080e400L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x800L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc000L, active2, 0x1000010L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x80008000000000L, active2, 0x800160071120L, active3, 0x20L);
      case 107:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 110);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000000L, active1, 0x41L, active2, 0x8004000000L, active3, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800004800000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000048000080L, active2, 0x2100080400000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x3104000000000000L, active1, 0xa080249012a0002L, active2, 0x800000881L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3400010080050108L, active2, 0L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0xc020003000100000L, active2, 0x201000280000L, active3, 0L);
      case 116:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 148, 16);
         return jjMoveStringLiteralDfa3_0(active0, 0x8200000000000L, active1, 0x200022400200L, active2, 0x8000004L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000030L, active2, 0x200L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L);
      case 121:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 153, 16);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L, active2, 0x20000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x5518000000000000L, active3, 0x1545L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc000000000000000L, active2, 0xaa80200000000000L, active3, 0x6a8aL);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000000L, active1, 0x8800026400041L, active2, 0x85L, active3, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000L, active2, 0x20L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x101000000000000L, active2, 0x800000L, active3, 0L);
      case 100:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 16);
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x1000000240000000L, active2, 0x404000400800L, active3, 0L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x203000100800L, active2, 0x200000L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xe000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x70000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x420000000000000L, active1, 0x80000088L, active2, 0x11000010L, active3, 0L);
      case 108:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 16);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 16);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x200400000000000L, active1, 0x1020L, active2, 0x100000000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x880000000000000L, active1, 0x80000000200010L, active2, 0x800000000000L, active3, 0L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 16);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 162, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa001248010a0000L, active2, 0x10060001100L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2400010100850100L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x40400000000L, active2, 0x200L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x600L, active2, 0x41000008000048L, active3, 0x20L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(3, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(3, 79);
         return jjMoveStringLiteralDfa4_0(active0, 0x1100800000000000L, active1, 0x20080010000004L, active2, 0x20140800000402L, active3, 0L);
      case 116:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x8200000000000L, active1, 0x42000000000000L, active2, 0x6021000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0x80000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8008000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8a00000000000000L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4008L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x5518000000000000L, active3, 0x15c5L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x2L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40100000L, active2, 0x140000400000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x8020000000001600L, active2, 0x20008000000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400010000050000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 48);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(4, 59);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 16);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 16);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10c2108000000020L, active2, 0x811001000c48L, active3, 0x20L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0x10000000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800004000000L, active2, 0L, active3, 0L);
      case 104:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(4, 178);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L, active2, 0x70000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x210000000L, active2, 0x1000000000000L, active3, 0L);
      case 107:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0x1000L, active3, 0L);
      case 108:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x420000000000000L, active1, 0xc000400000000L, active2, 0x40000000b0L, active3, 0L);
      case 109:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 109);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200018L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000000000000L, active1, 0x841L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000088000000L, active2, 0x2000000000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L, active2, 0x200L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8200000000000L, active1, 0x3020400000L, active2, 0x600000200000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0xa000200010a0000L, active2, 0x40080000000000L, active3, 0L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(4, 54);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(4, 56);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(4, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(4, 61);
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x1004102000180L, active2, 0x2000004000e004L, active3, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x2000000000802000L, active2, 0x800000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x282L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4008L);
      case 71:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8a00000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3100000000L, active2, 0x551888000000e080L, active3, 0x1545L);
      case 97:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 97);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2010L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L, active2, 0x20000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L, active2, 0x8000000L, active3, 0x20L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(5, 46);
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 114);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(5, 130);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x804000000000L, active2, 0x20400000000000L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L, active2, 0x100000000000L, active3, 0x10L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0x40000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x428200000000000L, active1, 0x800000088L, active2, 0x40000000000020L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000002L, active2, 0x2000040000200L, active3, 0L);
      case 109:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 164, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000400L, active2, 0x400000L, active3, 0L);
      case 110:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 103);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 166, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x800001L, active2, 0x48L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4081000000000100L, active2, 0x1200000000000L, active3, 0L);
      case 112:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(5, 125);
         break;
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 108);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0x1042000090100000L, active2, 0x10000000400L, active3, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(5, 62);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(5, 66);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(5, 115);
         else if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(5, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(5, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 149, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x800080060001a00L, active2, 0x870000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x86000300030f0000L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 121:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 156, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4500000000000000L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8a80000000000000L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0x4L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4048L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0x2000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x802L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0x1L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x420200000L, active2, 0x70000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800080000a0L, active2, 0x30000008000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x8200000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400010000050140L, active2, 0L, active3, 0L);
      case 100:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 176);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 16);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 151, 16);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 152, 16);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x10100603L, active2, 0x80000400000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800000004000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x204800000000000L, active1, 0x10000001c0003000L, active2, 0x100000000280L, active3, 0L);
      case 109:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStopAtPos(6, 181);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000200010a0000L, active2, 0L, active3, 0L);
      case 110:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 158, 16);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4042000000000000L, active2, 0x2020L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x42200000000000L, active3, 0x10L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 112);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000800000010L, active2, 0x10L, active3, 0L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(6, 75);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 89);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 111);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(6, 87);
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 155, 16);
         return jjMoveStringLiteralDfa7_0(active0, 0x420000000000000L, active1, 0x8000000000000008L, active2, 0x40L, active3, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000000L, active2, 0x40000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1080000000000000L, active3, 0x141L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0x408cL);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4500000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x600L);
      case 75:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8a00000000000000L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0x2000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x842003000000000L, active2, 0x40400L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000002L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(7, 96);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(7, 135);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000010000000L, active2, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0x6000300010f0000L, active2, 0x210L, active3, 0L);
      case 102:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(7, 84);
         break;
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L, active2, 0x2000000020020L, active3, 0L);
      case 105:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(7, 170);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0x8L, active2, 0L, active3, 0L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L, active2, 0x100000000000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x840000000L, active2, 0L, active3, 0L);
      case 110:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(7, 182);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000002000L, active2, 0x10000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0x8100000000001100L, active2, 0x2000L, active3, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x41L, active2, 0x80000000c000L, active3, 0x10L);
      case 115:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(7, 134);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L, active2, 0x420000400000L, active3, 0L);
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(7, 102);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(7, 119);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(7, 173);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4a8000400L, active2, 0x10000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x8200000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L);
      case 121:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(7, 53);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(7, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4510000000000000L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0x40L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0x4L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4008L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0x481L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8a00000000000000L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x810000081L, active2, 0x2000400000000000L, active3, 0x2L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0L);
      case 100:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x600000000000000L, active2, 0x2000L, active3, 0L);
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(8, 69);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(8, 94);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(8, 168);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(8, 169);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(8, 172);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0x200400L, active2, 0L, active3, 0L);
      case 103:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(8, 124);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(8, 143);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4800000428000040L, active2, 0L, active3, 0L);
      case 108:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 113);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(8, 118);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000100L, active2, 0L, active3, 0L);
      case 109:
         if ((active3 & 0x10L) != 0L)
            return jjStopAtPos(8, 196);
         break;
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(8, 132);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L, active2, 0x14000L, active3, 0L);
      case 114:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(8, 137);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0x80000700000c0000L, active2, 0x60000L, active3, 0x20L);
      case 115:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(8, 133);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000000L, active2, 0x400000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8a00000000000L, active1, 0x3000002000L, active2, 0x80000000400L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(8, 73);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 95);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 177);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0x4008L);
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0xc4L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x300L);
      case 75:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0x1L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x802L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x6500000000000000L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L);
      case 88:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x6000300000c0000L, active2, 0x8a00000000000000L, active3, 0L);
      case 97:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000002000L, active2, 0x400000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(9, 67);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(9, 107);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(9, 141);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0x40000000000L, active2, 0x80000000000L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 103:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(9, 146);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0x100000000000000L, active2, 0x800000000400L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x420000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000002L, active2, 0x400000020000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(9, 50);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(9, 58);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(9, 72);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(9, 76);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000800000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x4000L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(9, 85);
         else if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(9, 197);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0x802L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8080000000000000L, active3, 0x100L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0x84L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4500000000000000L, active3, 0x4208L);
      case 89:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000L, active2, 0x1000000000000000L, active3, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(10, 93);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(10, 98);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(10, 144);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L);
      case 102:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(10, 106);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x600000000000000L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0x40000008000c0000L, active2, 0L, active3, 0L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      case 110:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(10, 127);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(10, 175);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8002000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L, active2, 0x400L, active3, 0L);
      case 112:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(10, 142);
         break;
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x30000000000L, active2, 0x80000000000L, active3, 0L);
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(10, 51);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(10, 74);
         break;
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(10, 70);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x900000000000000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x400000020000L, active3, 0L);
      case 121:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(10, 92);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x208000000000000L, active3, 0x204L);
      case 66:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L);
      case 69:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 183, 16);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x108L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x401L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x802L);
      case 86:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 88:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L, active2, 0x4500000000000000L, active3, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x600000000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2080L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(11, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(11, 83);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 101:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 150, 16);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x30000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0x1L, active2, 0x80000000400L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 112:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(11, 145);
         break;
      case 115:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(11, 91);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(11, 123);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000000L, active2, 0x400000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x880L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0x401L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x4010000000000000L, active3, 0x2000L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0x8L);
      case 82:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 206, 16);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 84:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(12, 193, 16);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0x304L);
      case 89:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x600030000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(12, 99);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(12, 47);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(12, 138);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0x80L, active2, 0L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, active3);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0x100L);
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L);
      case 69:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 180, 16);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0x2004L);
      case 77:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0x200L);
      case 82:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x880L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x401L);
      case 84:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 191, 16);
         break;
      case 86:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L);
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 104:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(13, 63);
         break;
      case 108:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(13, 171);
         break;
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x30000000000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(13, 71);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(13, 77);
         break;
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x600000000000001L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2, active3);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x1000000000000000L, active3, 0x440L);
      case 73:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x1000L);
      case 77:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x100000000000000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x400000000000000L, active3, 0x4L);
      case 82:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 179, 16);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x200L);
      case 83:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x4000000000000000L, active3, 0x2000L);
      case 84:
         if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(14, 192, 16);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x100L);
      case 95:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xa00000000000000L, active3, 0x888L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x2L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(14, 100);
         break;
      case 104:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(14, 64);
         break;
      case 108:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(14, 126);
         break;
      case 114:
         return jjMoveStringLiteralDfa15_0(active1, 0x30000000000L, active2, 0L, active3, 0L);
      case 115:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(14, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(14, 121);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(14, 122);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x400000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2, active3);
      return 15;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x100000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0xa00000000000000L, active3, 0x1000L);
      case 76:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x880L);
      case 78:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2400000000000000L, active3, 0x4L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x100L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x440L);
      case 84:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 190, 16);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(15, 205, 16);
         break;
      case 95:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x1000400000000000L, active3, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa16_0(active1, 0x2L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa16_0(active1, 0x30000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2, active3);
      return 16;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x1000000000000000L, active3, 0x880L);
      case 76:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x208L);
      case 78:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0xa00000000000000L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x100L);
      case 83:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x1000L);
      case 95:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x500000000000000L, active3, 0x444L);
      case 102:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x400000000000L, active3, 0L);
      case 115:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(16, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(16, 105);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0x2L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, active2, active3);
      return 17;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x8L);
      case 68:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0xa00000000000000L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x500000000000000L, active3, 0x200L);
      case 76:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x440L);
      case 78:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x4L);
      case 83:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x880L);
      case 84:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(17, 204, 16);
         break;
      case 95:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active1, 0x2L, active2, 0x400000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(16, 0L, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, active2, active3);
      return 18;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0xa00000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active3, 0x440L);
      case 76:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active3, 0x104L);
      case 78:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(18, 195, 16);
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0x500000000000000L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active3, 0x200L);
      case 84:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(18, 199, 16);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(18, 203, 16);
         break;
      case 88:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 189, 16);
         break;
      case 108:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0x400000000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active1, 0x2L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(17, 0L, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, active2, active3);
      return 19;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0L, active3, 0x4L);
      case 68:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0x500000000000000L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0L, active3, 0x100L);
      case 83:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active2, 0L, active3, 0x440L);
      case 84:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(19, 201, 16);
         break;
      case 88:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 185, 16);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 187, 16);
         break;
      case 101:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(19, 174);
         break;
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(19, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(18, 0L, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, active2, active3);
      return 20;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa21_0(active2, 0x500000000000000L, active3, 0L);
      case 78:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(20, 194, 16);
         break;
      case 83:
         return jjMoveStringLiteralDfa21_0(active2, 0L, active3, 0x100L);
      case 84:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(20, 198, 16);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(20, 202, 16);
         break;
      case 88:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 188, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, active2, active3);
}
private final int jjMoveStringLiteralDfa21_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, active2, active3);
      return 21;
   }
   switch(curChar)
   {
      case 84:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(21, 200, 16);
         break;
      case 88:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 184, 16);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 186, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, active2, active3);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 89;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 7);
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 46)
                     jjCheckNAdd(18);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 63)
                     jjAddStates(11, 12);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 210)
                        kind = 210;
                     jjCheckNAddStates(13, 15);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 210)
                        kind = 210;
                     jjCheckNAddStates(16, 18);
                  }
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 51)
                     jjAddStates(19, 20);
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 49)
                     jjCheckNAdd(35);
                  break;
               case 9:
               case 16:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 209)
                     kind = 209;
                  jjCheckNAdd(16);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 35 && kind > 207)
                     kind = 207;
                  break;
               case 17:
                  if (curChar == 46)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddStates(21, 23);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if ((0x6000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0xa00000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 26:
                  if (curChar == 48)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0xa00000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 212)
                     kind = 212;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 49)
                     jjAddStates(27, 29);
                  break;
               case 31:
                  if (curChar == 48)
                     jjCheckNAdd(28);
                  break;
               case 32:
                  if (curChar == 49)
                     jjCheckNAdd(28);
                  break;
               case 33:
                  if (curChar == 50)
                     jjCheckNAdd(28);
                  break;
               case 34:
                  if (curChar == 49)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 213)
                     kind = 213;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L && kind > 213)
                     kind = 213;
                  break;
               case 42:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0xf000000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 44:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 45:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 47:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 48:
                  if (curChar == 34 && kind > 214)
                     kind = 214;
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 51:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 53:
                  if (curChar == 51)
                     jjAddStates(19, 20);
                  break;
               case 54:
                  if (curChar == 48)
                     jjCheckNAdd(25);
                  break;
               case 55:
                  if (curChar == 49)
                     jjCheckNAdd(25);
                  break;
               case 56:
                  if (curChar != 48)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAddStates(16, 18);
                  break;
               case 58:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 59:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAddStates(13, 15);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAddTwoStates(60, 57);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 7);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar != 46)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddStates(34, 36);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddStates(34, 36);
                  break;
               case 66:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddTwoStates(67, 22);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddTwoStates(71, 22);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 22);
                  break;
               case 76:
                  if (curChar == 63)
                     jjAddStates(11, 12);
                  break;
               case 78:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x7ffe01000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 83:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(81, 83);
                  break;
               case 86:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 216)
                     kind = 216;
                  jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x7ffe01000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 81);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 209)
                        kind = 209;
                     jjCheckNAdd(16);
                  }
                  else if (curChar == 64)
                     jjAddStates(40, 41);
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 209)
                        kind = 209;
                     jjCheckNAdd(16);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 215)
                        kind = 215;
                     jjCheckNAdd(78);
                  }
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(88, 81);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 216)
                        kind = 216;
                     jjCheckNAdd(86);
                  }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 5:
                  jjAddStates(42, 43);
                  break;
               case 7:
                  if (curChar == 101 && kind > 208)
                     kind = 208;
                  break;
               case 8:
                  if (curChar == 117)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(7);
                  break;
               case 12:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 209)
                     kind = 209;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 209)
                     kind = 209;
                  jjCheckNAdd(16);
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 22:
                  if ((0x5000000050L & l) != 0L && kind > 211)
                     kind = 211;
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 46:
                  if (curChar == 92)
                     jjAddStates(46, 48);
                  break;
               case 47:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 57:
                  if ((0x100000001000L & l) != 0L && kind > 210)
                     kind = 210;
                  break;
               case 65:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  jjCheckNAdd(78);
                  break;
               case 79:
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 82:
               case 83:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(81, 83);
                  break;
               case 84:
                  if (curChar == 64)
                     jjAddStates(40, 41);
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 216)
                     kind = 216;
                  jjCheckNAdd(86);
                  break;
               case 87:
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(88, 81);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 89 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   62, 63, 68, 69, 72, 73, 22, 36, 45, 46, 48, 77, 79, 60, 57, 25, 
   57, 58, 35, 54, 55, 18, 19, 22, 26, 27, 30, 31, 32, 33, 45, 46, 
   50, 48, 64, 65, 22, 72, 73, 22, 85, 87, 5, 6, 20, 21, 47, 49, 
   51, 66, 67, 70, 71, 74, 75, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\75\75", "\74\75", "\76\75", "\41\75", "\76", "\74", "\53", "\55", "\52", "\57", "\45", 
"\136", "\46\46", "\174\174", "\41", "\176", "\46", "\174", "\50", "\51", "\173", 
"\175", "\54", "\72\72", "\77", "\100", "\56", "\75\76", "\74\55", "\151\146", 
"\164\150\145\156", "\145\154\163\145", "\72\141\164\164\162\151\142\165\164\145", 
"\72\166\141\154\165\145", "\72\162\145\163\164\162\151\143\164\151\157\156\163", "\72\164\171\160\145", 
"\72\151\144", "\72\155\157\144\151\146\151\145\162\163", 
"\72\141\164\164\162\151\142\165\164\145\163", "\72\141\147\145\156\164", "\72\141\142\151\154\151\164\171", 
"\72\146\141\143\164", "\72\164\151\155\145", "\72\143\157\163\164", 
"\72\162\145\154\141\164\151\157\156", "\72\141\142\151\154\151\164\151\145\163", "\72\156\141\155\145", 
"\72\150\157\163\164", "\72\160\157\162\164", "\72\143\154\141\163\163", 
"\72\160\154\141\156\156\145\162\137\167\151\144\164\150", "\72\160\154\141\156\156\145\162\137\154\145\156\147\164\150", 
"\72\144\157\165\142\154\145\142\157\157\153\137\146\162\141\143\164\151\157\156", "\72\164\141\163\153\163", "\72\120\162\151\155\151\164\151\166\145", 
"\72\123\165\155\155\141\162\171", "\72\122\165\154\145\142\141\163\145", 
"\72\120\154\141\156\123\143\162\151\160\164", "\72\151\156\151\164\151\141\154\137\146\141\143\164\163", 
"\72\160\162\157\164\157\143\157\154\163", "\72\163\164\162\141\164\145\147\171", 
"\72\160\141\162\141\155\145\164\145\162\163", "\72\141\147\145\156\164\163", "\72\162\145\154\141\164\151\157\156\163", 
"\72\141\143\161\165\141\151\156\164\141\156\143\145\163", "\72\154\150\163", "\72\162\150\163", "\72\160\162\157\144\165\143\145\162", 
"\72\143\157\156\163\165\155\145\162", "\72\160\162\157\144\165\143\145\162\137\151\144", 
"\72\143\157\156\163\165\155\145\162\137\151\144", "\72\165\163\145\137\162\145\146", "\72\143\157\155\155\163\137\153\145\171", 
"\72\163\164\141\162\164", "\72\141\155\157\165\156\164", "\72\143\157\156\163\165\155\145\144", 
"\72\163\164\141\164\165\163", "\72\151\155\141\147\145", "\72\151\156\166\157\143\141\164\151\157\156\163", 
"\72\144\145\163\151\162\145\144\137\142\171", "\72\163\164\141\162\164\137\164\151\155\145", 
"\72\145\156\144\137\164\151\155\145", "\72\160\162\151\157\162\151\164\171", "\72\162\157\157\164\137\151\144", 
"\72\155\145\144\151\141", "\72\162\145\160\154\171\137\164\151\155\145", 
"\72\143\157\156\146\151\162\155\137\164\151\155\145", "\72\165\163\145\162\137\144\141\164\141\137\164\171\160\145", 
"\72\165\163\145\162\137\144\141\164\141", "\72\143\157\156\164\145\170\164", "\72\147\151\166\145\156", 
"\72\160\162\157\144\165\143\145\162\137\162\145\143\157\162\144\163", "\72\143\157\156\163\165\155\145\162\137\162\145\143\157\162\144\163", 
"\72\163\165\160\160\154\171\137\162\145\146", "\72\150\141\163\150\164\141\142\154\145", "\72\157\167\156\145\162", 
"\72\151\164\145\155", "\72\157\153", "\72\151\155\141\147\145\163", "\72\166\145\143\164\157\162", 
"\72\145\170\164\145\162\156\141\154", "\72\164\141\142\154\145", "\72\147\157\141\154\163", "\107\157\141\154", 
"\115\145\163\163\141\147\145", "\72\151\156\164\145\162\156\141\154", "\72\164\151\155\145\157\165\164", 
"\72\144\145\143\157\155\160\157\163\151\164\151\157\156\163", "\72\143\157\156\163\165\155\145\144\137\146\141\143\164\163", 
"\72\160\162\157\144\165\143\145\144\137\146\141\143\164\163", "\72\143\157\156\163\164\162\141\151\156\164\163", 
"\72\157\162\144\145\162\151\156\147", "\72\147\162\157\165\160", 
"\72\151\163\137\143\157\156\144\151\164\151\157\156\141\154", "\72\151\163\137\141\165\164\157\162\165\156", "\72\147\157\141\154", 
"\72\164\141\163\153", "\72\163\164\141\164\145", "\72\160\141\162\145\156\164", 
"\72\143\150\151\154\144\162\145\156", "\72\163\151\142\154\151\156\147\163", "\72\160\141\162\145\156\164\163", 
"\72\147\157\141\154\137\151\144", "\72\154\151\156\153", "\72\163\165\160\160\154\151\145\162", 
"\72\162\145\163\145\162\166\141\164\151\157\156\163", "\72\156\157\144\145\163", "\72\154\151\156\153\163", 
"\72\154\145\146\164\137\156\157\144\145", "\72\154\145\146\164\137\147\162\157\165\160", 
"\72\154\145\146\164\137\141\162\147", "\72\162\151\147\150\164\137\156\157\144\145", 
"\72\162\151\147\150\164\137\147\162\157\165\160", "\72\162\151\147\150\164\137\141\162\147", "\164\145\163\164", "\156\157\164", 
"\141\163\163\145\162\164", "\163\145\156\144\137\155\145\163\163\141\147\145", 
"\145\170\145\143\165\164\145", "\141\143\150\151\145\166\145", "\142\165\171", "\163\145\154\154", 
"\162\145\164\162\141\143\164", "\155\157\144\151\146\171", "\160\162\151\156\164", 
"\160\162\151\156\164\154\156", "\142\151\156\144", "\167\150\151\154\145", "\144\157", "\157\160\145\156", 
"\143\154\157\163\145", "\163\171\163\164\145\155", "\162\145\141\144", "\162\145\141\144\154\156", 
"\143\141\154\154", "\72\147\145\156\145\162\141\164\145", "\72\144\141\164\141\142\141\163\145", 
"\72\150\141\163\137\147\165\151", "\72\172\145\165\163\137\145\170\164\145\162\156\141\154", 
"\72\144\156\163\137\146\151\154\145", "\72\151\163\137\162\157\157\164", 
"\72\141\144\144\162\145\163\163\137\157\165\164\160\165\164\137\146\151\154\145", "\72\164\151\155\145\137\147\162\141\151\156", "\72\160\145\162\151\157\144", 
"\72\157\156\164\157\154\157\147\171", "\72\160\141\164\150", 
"\102\105\107\111\116\137\107\105\116\105\122\101\124\117\122", "\102\105\107\111\116\137\120\122\105\101\115\102\114\105", 
"\72\163\171\163\164\145\155", "\72\166\145\162\163\151\157\156", 
"\105\116\104\137\120\122\105\101\115\102\114\105", 
"\102\105\107\111\116\137\101\107\105\116\124\137\116\101\115\105\137\111\116\104\105\130", 
"\105\116\104\137\101\107\105\116\124\137\116\101\115\105\137\111\116\104\105\130", 
"\102\105\107\111\116\137\101\107\105\116\124\137\111\103\117\116\137\111\116\104\105\130", 
"\105\116\104\137\101\107\105\116\124\137\111\103\117\116\137\111\116\104\105\130", 
"\102\105\107\111\116\137\124\101\123\113\137\116\101\115\105\137\111\116\104\105\130", 
"\105\116\104\137\124\101\123\113\137\116\101\115\105\137\111\116\104\105\130", "\102\105\107\111\116\137\101\107\105\116\124\137\114\111\123\124", 
"\105\116\104\137\101\107\105\116\124\137\114\111\123\124", "\102\105\107\111\116\137\124\101\123\113\137\114\111\123\124", 
"\105\116\104\137\124\101\123\113\137\114\111\123\124", 
"\102\105\107\111\116\137\107\105\116\105\122\101\124\111\117\116\137\120\114\101\116", 
"\105\116\104\137\107\105\116\105\122\101\124\111\117\116\137\120\114\101\116", "\72\160\154\141\164\146\157\162\155", 
"\72\144\151\162\145\143\164\157\162\171", 
"\102\105\107\111\116\137\116\101\115\105\123\105\122\126\105\122\137\114\111\123\124", 
"\105\116\104\137\116\101\115\105\123\105\122\126\105\122\137\114\111\123\124", 
"\102\105\107\111\116\137\106\101\103\111\114\111\124\101\124\117\122\137\114\111\123\124", 
"\105\116\104\137\106\101\103\111\114\111\124\101\124\117\122\137\114\111\123\124", 
"\102\105\107\111\116\137\126\111\123\125\101\114\111\123\105\122\137\114\111\123\124", 
"\105\116\104\137\126\111\123\125\101\114\111\123\105\122\137\114\111\123\124", "\102\105\107\111\116\137\104\102\120\122\117\130\131\137\114\111\123\124", 
"\105\116\104\137\104\102\120\122\117\130\131\137\114\111\123\124", "\105\116\104\137\107\105\116\105\122\101\124\117\122", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3ffffffL, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 0x0L, 0x0L, 
};
private SimpleCharStream input_stream;
private final int[] jjrounds = new int[89];
private final int[] jjstateSet = new int[178];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public ParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 89; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
final void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
