/* Generated By:JavaCC: Do not edit this line. Parser.java */
package zeus.concepts;

import java.util.*;
import java.io.*;
import java.lang.reflect.*;
import zeus.util.*;
import zeus.concepts.fn.*;
import zeus.generator.code.*;
import zeus.generator.*;
import zeus.rete.Action;
import zeus.rete.Pattern;
import zeus.rete.Rule;
import zeus.rete.ReteFact;

public class Parser implements ParserConstants {

  final public void end_of_file() throws ParseException {
    jj_consume_token(0);
  }

  final public AbilityDbItem abilityDbItem(OntologyDb db) throws ParseException {
Token t;
AbilitySpec a;
    jj_consume_token(LBRACKET);
    jj_consume_token(AGENT);
    t = jj_consume_token(ID);
    jj_consume_token(ABILITY);
    a = abilitySpec(db);
    jj_consume_token(RBRACKET);
     {if (true) return new AbilityDbItem(t.image,a);}
    throw new Error("Missing return statement in function");
  }

  final public Vector abilityDbItemList(OntologyDb db) throws ParseException {
Vector result = new Vector();
AbilityDbItem a = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      a = abilityDbItem(db);
      result.addElement(a);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public AbilitySpec abilitySpec(OntologyDb db) throws ParseException {
Fact f;
Token t,n;
double c;
    jj_consume_token(LBRACKET);
    jj_consume_token(FACT);
    f = fact(db);
    jj_consume_token(TIME);
    t = jj_consume_token(INTEGER);
    jj_consume_token(COST);
    c = Real();
    jj_consume_token(NAME);
    n = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new AbilitySpec(n.image,f,Integer.parseInt(t.image),c);}
    throw new Error("Missing return statement in function");
  }

  final public Vector abilitySpecList(OntologyDb db) throws ParseException {
Vector result = new Vector();
AbilitySpec a = null;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      a = abilitySpec(db);
      result.addElement(a);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Restriction restriction(OntologyDb db) throws ParseException {
Token taskName, factName, attributeName, attributeValue;
    jj_consume_token(LBRACKET);
    jj_consume_token(TASK);
    taskName = jj_consume_token(ID);
    jj_consume_token(FACT);
    factName = jj_consume_token(VARIABLE);
    jj_consume_token(ATTRIBUTE);
    attributeName = jj_consume_token(ID);
    jj_consume_token(VALUE);
    attributeValue = jj_consume_token(LITERAL);
    jj_consume_token(RBRACKET);
        Restriction r = new Restriction(taskName.image, factName.image,
                                        attributeName.image,
                                        attributeValue.image);
        {if (true) return (r);}
    throw new Error("Missing return statement in function");
  }

  final public Acquaintance acquaintance(OntologyDb db) throws ParseException {
Token name, relation;
AbilitySpec a;
Vector data = new Vector();
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    name = jj_consume_token(ID);
    jj_consume_token(RELATION);
    relation = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABILITIES:
      jj_consume_token(ABILITIES);
      jj_consume_token(LBRACKET);
      label_3:
      while (true) {
        a = abilitySpec(db);
           data.addElement(a);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return new Acquaintance(name.image,relation.image,data);}
    throw new Error("Missing return statement in function");
  }

  final public Address address() throws ParseException {
Token name, host, port, type;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    name = jj_consume_token(ID);
    jj_consume_token(HOST);
    host = jj_consume_token(LITERAL);
    jj_consume_token(PORT);
    port = jj_consume_token(INTEGER);
    jj_consume_token(TYPE);
    type = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new ZeusAddress(name.image,
        Misc.literalToString(host.image),
        Integer.parseInt(port.image),type.image);}
    throw new Error("Missing return statement in function");
  }

  final public Vector addressList() throws ParseException {
Vector result = new Vector();
Address a = null;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      a = address();
      result.addElement(a);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public AgentDescription agentDescription(OntologyDb db) throws ParseException {
Token name, xclass, width, length, book;
Vector tasks = new Vector();
Vector protocols = new Vector();
Vector acquaintances = new Vector();
Vector facts = new Vector();
Vector restrictions = new Vector();
Token t = null;
Acquaintance a = null;
ProtocolInfo p = null;
Fact f = null;
Restriction r = null;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    name = jj_consume_token(ID);
    jj_consume_token(CLASS);
    xclass = jj_consume_token(ID);
    jj_consume_token(PLANNER_WIDTH);
    width = jj_consume_token(INTEGER);
    jj_consume_token(PLANNER_LENGTH);
    length = jj_consume_token(INTEGER);
    jj_consume_token(DOUBLE_BOOK_FRACTION);
    book = jj_consume_token(INTEGER);
    if (jj_2_1(2)) {
      jj_consume_token(TASKS);
      jj_consume_token(LBRACKET);
      label_5:
      while (true) {
        t = jj_consume_token(ID);
             tasks.addElement(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(RBRACKET);
    } else {
      ;
    }
    if (jj_2_2(2)) {
      jj_consume_token(INITIAL_FACTS);
      jj_consume_token(LBRACKET);
      label_6:
      while (true) {
        f = fact(db);
            facts.addElement(f);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(RBRACKET);
    } else {
      ;
    }
    if (jj_2_3(2)) {
      jj_consume_token(PROTOCOLS);
      jj_consume_token(LBRACKET);
      label_7:
      while (true) {
        p = protocolInfo(db);
            protocols.addElement(p);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
      }
      jj_consume_token(RBRACKET);
    } else {
      ;
    }
    if (jj_2_4(2)) {
      jj_consume_token(ACQUAINTANCES);
      jj_consume_token(LBRACKET);
      label_8:
      while (true) {
        a = acquaintance(db);
            acquaintances.addElement(a);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_8;
        }
      }
      jj_consume_token(RBRACKET);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTRICTIONS:
      jj_consume_token(RESTRICTIONS);
      jj_consume_token(LBRACKET);
      label_9:
      while (true) {
        r = restriction(db);
            restrictions.addElement (r);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
       AgentDescription agent = new AgentDescription();
       agent.setName(name.image);
       agent.setAgentClass(xclass.image);
       agent.setPlannerWidth(Integer.parseInt(width.image));
       agent.setPlannerLength(Integer.parseInt(length.image));
       agent.setDoublebookFraction(Integer.parseInt(book.image));
       agent.setTasks(tasks);
       agent.setInitialFacts(facts);
       agent.setProtocols(protocols);
       agent.setAcquaintances(acquaintances);
       agent.setRestrictions (restrictions);
       {if (true) return agent;}
    throw new Error("Missing return statement in function");
  }

  final public ConsumerRecord consumerRecord() throws ParseException {
Token p, pid, c, cid, u, k, s, a, b;
    jj_consume_token(LBRACKET);
    jj_consume_token(PRODUCER);
    p = jj_consume_token(ID);
    jj_consume_token(PRODUCER_ID);
    pid = jj_consume_token(ID);
    jj_consume_token(CONSUMER);
    c = jj_consume_token(ID);
    jj_consume_token(CONSUMER_ID);
    cid = jj_consume_token(ID);
    jj_consume_token(USE_REF);
    u = jj_consume_token(ID);
    jj_consume_token(COMMS_KEY);
    k = jj_consume_token(ID);
    jj_consume_token(START);
    s = jj_consume_token(INTEGER);
    jj_consume_token(AMOUNT);
    a = jj_consume_token(INTEGER);
    jj_consume_token(CONSUMED);
    b = jj_consume_token(BOOLEAN);
    jj_consume_token(RBRACKET);
     {if (true) return new ConsumerRecord(p.image,pid.image,
        c.image,cid.image,u.image,k.image,
        Integer.parseInt(s.image),Integer.parseInt(a.image),
        (Boolean.valueOf(b.image)).booleanValue());}
    throw new Error("Missing return statement in function");
  }

  final public Fact fact(OntologyDb db) throws ParseException {
Token type, id, mod, attribute;
ValueFunction value = null;
Fact f = null;
    jj_consume_token(LBRACKET);
    jj_consume_token(TYPE);
    type = jj_consume_token(ID);
    jj_consume_token(FID);
    id = jj_consume_token(ID);
    jj_consume_token(MODIFIERS);
    mod = jj_consume_token(INTEGER);
       int modifiers = Integer.parseInt(mod.image);
       f = db.getFact(Fact.isVariable(modifiers),type.image);
       f.setModifiers(modifiers);
       f.setId(id.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTRIBUTES:
      jj_consume_token(ATTRIBUTES);
      jj_consume_token(LBRACKET);
      label_10:
      while (true) {
        jj_consume_token(LBRACKET);
        attribute = jj_consume_token(ID);
        value = Expression(db);
        jj_consume_token(RBRACKET);
          f.setValue(attribute.image,value);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Vector factList(OntologyDb db) throws ParseException {
Vector result = new Vector();
Fact f = null;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_11;
      }
      f = fact(db);
      result.addElement(f);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public FactSummary factSummary(OntologyDb db) throws ParseException {
Fact f;
Token t;
    jj_consume_token(LBRACKET);
    jj_consume_token(FACT);
    f = fact(db);
    jj_consume_token(STATUS);
    t = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new FactSummary(f,t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Goal goal(OntologyDb db) throws ParseException {
Token id, t, s, e, p, d, lhs, rhs;
Goal goal = null;
Fact f = null;
Vector temp = new Vector();
String user_object = null;
String user_type = null;
ResolutionContext context = null;
SuppliedDb given = null;
ProducerRecord producer = null;
ConsumerRecord consumer = null;
double c;
    jj_consume_token(LBRACKET);
    jj_consume_token(FID);
    id = jj_consume_token(ID);
    jj_consume_token(DESIRED);
    d = jj_consume_token(ID);
    jj_consume_token(TYPE);
    t = jj_consume_token(BOOLEAN);
    jj_consume_token(FACT);
    f = fact(db);
       goal = new Goal((Boolean.valueOf(t.image)).booleanValue(),
          id.image,f,d.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMAGE:
      jj_consume_token(IMAGE);
      t = jj_consume_token(ID);
         goal.setImage(t.image);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_TIME:
      jj_consume_token(START_TIME);
      s = jj_consume_token(INTEGER);
         goal.setStartTime(Integer.parseInt(s.image));
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(END_TIME);
    e = jj_consume_token(INTEGER);
    jj_consume_token(COST);
    c = Real();
    jj_consume_token(PRIORITY);
    p = jj_consume_token(INTEGER);
       goal.setEndTime(Integer.parseInt(e.image));
       goal.setCost(c);
       goal.setPriority(Integer.parseInt(p.image));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INVOCATIONS:
      jj_consume_token(INVOCATIONS);
      t = jj_consume_token(INTEGER);
         goal.setInvocations(Integer.parseInt(t.image));
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ROOT_ID:
      jj_consume_token(ROOT_ID);
      t = jj_consume_token(ID);
         goal.setRootId(t.image);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MEDIA:
      jj_consume_token(MEDIA);
         temp.removeAllElements();
      jj_consume_token(LBRACKET);
      label_12:
      while (true) {
        lhs = jj_consume_token(LITERAL);
        rhs = jj_consume_token(LITERAL);
           temp.addElement(Misc.literalToString(lhs.image));
           temp.addElement(Misc.literalToString(rhs.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LITERAL:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_12;
        }
      }
      jj_consume_token(RBRACKET);
         String[] array = Misc.stringArray(temp);
         goal.setTargetMedia(array);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPLY_TIME:
      jj_consume_token(REPLY_TIME);
      t = jj_consume_token(REAL);
         goal.setReplyTime((Double.valueOf(t.image)).doubleValue());
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONFIRM_TIME:
      jj_consume_token(CONFIRM_TIME);
      t = jj_consume_token(REAL);
         goal.setConfirmTime((Double.valueOf(t.image)).doubleValue());
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USER_DATA_TYPE:
      jj_consume_token(USER_DATA_TYPE);
      t = jj_consume_token(LITERAL);
         user_type = Misc.literalToString(t.image);
         goal.setUserDataType(user_type);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USER_DATA:
        jj_consume_token(USER_DATA);
        t = jj_consume_token(OPAQUE);
            user_object = Misc.opaqueToString(t.image);
            try {
               Class x = Class.forName(user_type);
               Class[] parameter_types = new Class[1];
               Object[] arglist = new Object[1];
               parameter_types[0] = Class.forName("java.lang.String");
               arglist[0] = user_object;

               Constructor ct = x.getConstructor(parameter_types);
               Object user_data = ct.newInstance(arglist);
               goal.setUserData(user_data);
            }
            catch(Throwable err) {
               Core.USER_ERROR("Error creating user data: " + err);
            }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTEXT:
      jj_consume_token(CONTEXT);
      context = resolutionContext(db);
         goal.setResolutionContext(context);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GIVEN:
      jj_consume_token(GIVEN);
      jj_consume_token(LBRACKET);
      given = suppliedDb(db);
      jj_consume_token(RBRACKET);
         goal.setSuppliedDb(given);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRODUCER_RECORDS:
      jj_consume_token(PRODUCER_RECORDS);
      jj_consume_token(LBRACKET);
      label_13:
      while (true) {
        producer = producerRecord();
           goal.addProducer(producer);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_13;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSUMER_RECORDS:
      jj_consume_token(CONSUMER_RECORDS);
      jj_consume_token(LBRACKET);
      label_14:
      while (true) {
        consumer = consumerRecord();
           goal.addConsumer(consumer);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_14;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return goal;}
    throw new Error("Missing return statement in function");
  }

  final public Vector goalList(OntologyDb db) throws ParseException {
Vector result = new Vector();
Goal g = null;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_15;
      }
      g = goal(db);
      result.addElement(g);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public GoalSummary goalSummary() throws ParseException {
Token id, type, status, owner, item;
    jj_consume_token(LBRACKET);
    jj_consume_token(FID);
    id = jj_consume_token(ID);
    jj_consume_token(TYPE);
    type = jj_consume_token(ID);
    jj_consume_token(STATUS);
    status = jj_consume_token(ID);
    jj_consume_token(OWNER);
    owner = jj_consume_token(ID);
    jj_consume_token(ITEM);
    item = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new GoalSummary(id.image,type.image,status.image,
        owner.image,item.image);}
    throw new Error("Missing return statement in function");
  }

  final public ProducerRecord producerRecord() throws ParseException {
ProducerRecord record = null;
Token s, u, k, p, pid, c, cid;
    jj_consume_token(LBRACKET);
    jj_consume_token(SUPPLY_REF);
    s = jj_consume_token(ID);
    jj_consume_token(USE_REF);
    u = jj_consume_token(ID);
    jj_consume_token(COMMS_KEY);
    k = jj_consume_token(ID);
    jj_consume_token(PRODUCER);
    p = jj_consume_token(ID);
    jj_consume_token(PRODUCER_ID);
    pid = jj_consume_token(ID);
    jj_consume_token(CONSUMER);
    c = jj_consume_token(ID);
    jj_consume_token(CONSUMER_ID);
    cid = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new ProducerRecord(s.image,u.image,k.image,
        p.image,pid.image,c.image,cid.image);}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolInfo protocolInfo(OntologyDb db) throws ParseException {
StrategyInfo info = null;
Vector constraints = new Vector();
Token name, type;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    name = jj_consume_token(LITERAL);
    jj_consume_token(TYPE);
    type = jj_consume_token(ID);
    jj_consume_token(CONSTRAINTS);
    jj_consume_token(LBRACKET);
    label_16:
    while (true) {
      info = strategyInfo(db);
         constraints.addElement(info);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_16;
      }
    }
    jj_consume_token(RBRACKET);
    jj_consume_token(RBRACKET);
     {if (true) return new ProtocolInfo(Misc.literalToString(name.image),
        type.image,constraints);}
    throw new Error("Missing return statement in function");
  }

  final public StrategyInfo strategyInfo(OntologyDb db) throws ParseException {
StrategyInfo info = null;
Token name, type, key, value;
Hashtable param;
Vector agents = new Vector();
Vector relations = new Vector();
Fact f = null;
int type_val = StrategyInfo.USE;
    jj_consume_token(LBRACKET);
    jj_consume_token(FACT);
    f = fact(db);
    jj_consume_token(TYPE);
    type = jj_consume_token(INTEGER);
       type_val = Integer.parseInt(type.image);
       if ( type_val == StrategyInfo.NO_USE )
          info = new StrategyInfo(f);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRATEGY:
      jj_consume_token(STRATEGY);
      name = jj_consume_token(LITERAL);
         info = new StrategyInfo(f,Misc.literalToString(name.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAMETERS:
        jj_consume_token(PARAMETERS);
        jj_consume_token(LBRACKET);
           param = new Hashtable();
        label_17:
        while (true) {
          key = jj_consume_token(LITERAL);
          value = jj_consume_token(LITERAL);
             param.put(Misc.literalToString(key.image),
                       Misc.literalToString(value.image));
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LITERAL:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_17;
          }
        }
        jj_consume_token(RBRACKET);
           info.setParameters(param);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AGENTS:
      jj_consume_token(AGENTS);
      jj_consume_token(LBRACKET);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_18;
        }
        name = jj_consume_token(ID);
             agents.addElement(name.image);
      }
      jj_consume_token(RBRACKET);
         info.setAgents(agents);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIONS:
      jj_consume_token(RELATIONS);
      jj_consume_token(LBRACKET);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_19;
        }
        name = jj_consume_token(ID);
           relations.addElement(name.image);
      }
      jj_consume_token(RBRACKET);
         info.setRelations(relations);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return info;}
    throw new Error("Missing return statement in function");
  }

  final public Relationship relationship() throws ParseException {
Token name, relation;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    name = jj_consume_token(ID);
    jj_consume_token(RELATION);
    relation = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new Relationship(name.image,relation.image);}
    throw new Error("Missing return statement in function");
  }

  final public Vector relationshipList() throws ParseException {
Vector result = new Vector();
Relationship r = null;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_20;
      }
      r = relationship();
      result.addElement(r);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ReportRec reportRec(OntologyDb db) throws ParseException {
Token n, g, t, a, s, o, r, e;
double c;
ReportRec rec = null;
Vector consumed = new Vector();
Vector produced = new Vector();
Fact f;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    n = jj_consume_token(ID);
    jj_consume_token(GOAL);
    g = jj_consume_token(ID);
    jj_consume_token(TASK);
    t = jj_consume_token(ID);
    jj_consume_token(AGENT);
    a = jj_consume_token(ID);
    jj_consume_token(STATE);
    s = jj_consume_token(INTEGER);
    jj_consume_token(OWNER);
    o = jj_consume_token(ID);
    jj_consume_token(ROOT_ID);
    r = jj_consume_token(ID);
       rec = new ReportRec(n.image,g.image);
       rec.setTask(t.image);
       rec.setAgent(a.image);
       rec.setState(Integer.parseInt(s.image));
       rec.setOwner(o.image);
       rec.setRootId(r.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARENT:
      jj_consume_token(PARENT);
      n = jj_consume_token(ID);
         rec.setParent(n.image);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(START_TIME);
    s = jj_consume_token(INTEGER);
    jj_consume_token(END_TIME);
    e = jj_consume_token(INTEGER);
    jj_consume_token(COST);
    c = Real();
       rec.setStartTime(Integer.parseInt(s.image));
       rec.setEndTime(Integer.parseInt(e.image));
       rec.setCost(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHILDREN:
      jj_consume_token(CHILDREN);
      jj_consume_token(LBRACKET);
      label_21:
      while (true) {
        t = jj_consume_token(ID);
           rec.addChild(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_21;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIBLINGS:
      jj_consume_token(SIBLINGS);
      jj_consume_token(LBRACKET);
      label_22:
      while (true) {
        t = jj_consume_token(ID);
           rec.addSibling(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_22;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARENTS:
      jj_consume_token(PARENTS);
      jj_consume_token(LBRACKET);
      label_23:
      while (true) {
        t = jj_consume_token(ID);
           rec.addParent(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_23;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSUMED_FACTS:
      jj_consume_token(CONSUMED_FACTS);
      jj_consume_token(LBRACKET);
      label_24:
      while (true) {
        f = fact(db);
           consumed.addElement(f);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_24;
        }
      }
      jj_consume_token(RBRACKET);
         rec.setPreconditions(consumed);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRODUCED_FACTS:
      jj_consume_token(PRODUCED_FACTS);
      jj_consume_token(LBRACKET);
      label_25:
      while (true) {
        f = fact(db);
           produced.addElement(f);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_25;
        }
      }
      jj_consume_token(RBRACKET);
         rec.setPostconditions(produced);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return rec;}
    throw new Error("Missing return statement in function");
  }

  final public ReservationEntry reservationEntry() throws ParseException {
Token id, st, co, am, ag, gd, ck;
    jj_consume_token(LBRACKET);
    jj_consume_token(FID);
    id = jj_consume_token(ID);
    jj_consume_token(START);
    st = jj_consume_token(INTEGER);
    jj_consume_token(CONSUMED);
    co = jj_consume_token(BOOLEAN);
    jj_consume_token(AMOUNT);
    am = jj_consume_token(INTEGER);
    jj_consume_token(AGENT);
    ag = jj_consume_token(ID);
    jj_consume_token(GOAL_ID);
    gd = jj_consume_token(ID);
    jj_consume_token(COMMS_KEY);
    ck = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new ReservationEntry(id.image,
        Integer.parseInt(st.image),
        (Boolean.valueOf(co.image)).booleanValue(),
        Integer.parseInt(am.image), ag.image, gd.image, ck.image);}
    throw new Error("Missing return statement in function");
  }

  final public RoutingRecord routingRecord() throws ParseException {
Token p, pid, c, cid, uid, key;
    jj_consume_token(LBRACKET);
    jj_consume_token(PRODUCER);
    p = jj_consume_token(ID);
    jj_consume_token(PRODUCER_ID);
    pid = jj_consume_token(ID);
    jj_consume_token(CONSUMER);
    c = jj_consume_token(ID);
    jj_consume_token(CONSUMER_ID);
    cid = jj_consume_token(ID);
    jj_consume_token(USE_REF);
    uid = jj_consume_token(ID);
    jj_consume_token(COMMS_KEY);
    key = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new RoutingRecord(p.image,pid.image,c.image,
        cid.image,uid.image,key.image);}
    throw new Error("Missing return statement in function");
  }

  final public SuppliedDb suppliedDb(OntologyDb db) throws ParseException {
SuppliedDb suppliedDb = new SuppliedDb(db);
SuppliedItem item = null;
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_26;
      }
      item = suppliedItem(db);
       suppliedDb.add(item);
    }
     {if (true) return suppliedDb;}
    throw new Error("Missing return statement in function");
  }

  final public SuppliedItem suppliedItem(OntologyDb db) throws ParseException {
Token fid, lid, sid;
Fact f = null;
SuppliedItem item = null;
ReservationEntry entry;
    jj_consume_token(LBRACKET);
    jj_consume_token(FID);
    fid = jj_consume_token(ID);
    jj_consume_token(LINK);
    lid = jj_consume_token(LITERAL);
    jj_consume_token(FACT);
    f = fact(db);
    jj_consume_token(SUPPLIER);
    sid = jj_consume_token(ID);
       item = new SuppliedItem(fid.image,Misc.literalToString(lid.image),sid.image,f);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVATIONS:
      jj_consume_token(RESERVATIONS);
      jj_consume_token(LBRACKET);
      label_27:
      while (true) {
        entry = reservationEntry();
           Core.ERROR(item.reserve(entry),1,"Parser:suppliedItem");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_27;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return item;}
    throw new Error("Missing return statement in function");
  }

  final public ResolutionContext resolutionContext(OntologyDb db) throws ParseException {
Fact f = null;
ResolutionContext context = new ResolutionContext();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_28;
      }
      f = fact(db);
       context.add(f);
    }
     {if (true) return context;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractTask abstractTask(OntologyDb db) throws ParseException {
AbstractTask t = null;
    if (jj_2_5(2)) {
      t = primitiveTask(db);
    } else if (jj_2_6(2)) {
      t = summaryTask(db);
    } else if (jj_2_7(2)) {
      t = reteKB(db);
    } else if (jj_2_8(2)) {
      t = planScript(db);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveTask primitiveTask(OntologyDb db) throws ParseException {
Token t;
ValueFunction time = null, cost = null, fn = null;
Vector produced = new Vector();
Vector consumed = new Vector();
Vector ordering = new Vector();
Vector constraints = new Vector();
Fact f = null;
Ordering order = null;
    jj_consume_token(LBRACKET);
    jj_consume_token(PRIMITIVE);
    t = jj_consume_token(ID);
    jj_consume_token(TIME);
    jj_consume_token(LBRACKET);
    time = Expression(db);
    jj_consume_token(RBRACKET);
    jj_consume_token(COST);
    jj_consume_token(LBRACKET);
    cost = Expression(db);
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSUMED_FACTS:
      jj_consume_token(CONSUMED_FACTS);
      jj_consume_token(LBRACKET);
      label_29:
      while (true) {
        f = fact(db);
           consumed.addElement(f);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_29;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRODUCED_FACTS:
      jj_consume_token(PRODUCED_FACTS);
      jj_consume_token(LBRACKET);
      label_30:
      while (true) {
        f = fact(db);
           produced.addElement(f);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_30;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINTS:
      jj_consume_token(CONSTRAINTS);
      jj_consume_token(LBRACKET);
      label_31:
      while (true) {
        jj_consume_token(LBRACKET);
        fn = Expression(db);
        jj_consume_token(RBRACKET);
           constraints.addElement(fn);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_31;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDERING:
      jj_consume_token(ORDERING);
      jj_consume_token(LBRACKET);
      label_32:
      while (true) {
        order = ordering();
           ordering.addElement(order);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_32;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return new PrimitiveTask(t.image,time,cost,produced,
        consumed,constraints,ordering);}
    throw new Error("Missing return statement in function");
  }

  final public SummaryTask summaryTask(OntologyDb db) throws ParseException {
Token name;
ValueFunction cost = null, time = null, fn = null;
Vector nodes = new Vector();
Vector links = new Vector();
Vector constraints = new Vector();
TaskNode node = null;
TaskLink link = null;
    jj_consume_token(LBRACKET);
    jj_consume_token(SUMMARY);
    name = jj_consume_token(ID);
    jj_consume_token(IS_AUTORUN);
    jj_consume_token(BOOLEAN);
    jj_consume_token(TIME);
    jj_consume_token(LBRACKET);
    time = Expression(db);
    jj_consume_token(RBRACKET);
    jj_consume_token(COST);
    jj_consume_token(LBRACKET);
    cost = Expression(db);
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NODES:
      jj_consume_token(NODES);
      jj_consume_token(LBRACKET);
      label_33:
      while (true) {
        node = taskNode(db);
           nodes.addElement(node);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_33;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINKS:
      jj_consume_token(LINKS);
      jj_consume_token(LBRACKET);
      label_34:
      while (true) {
        link = taskLink();
         links.addElement(link);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_34;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINTS:
      jj_consume_token(CONSTRAINTS);
      jj_consume_token(LBRACKET);
      label_35:
      while (true) {
        jj_consume_token(LBRACKET);
        fn = Expression(db);
        jj_consume_token(RBRACKET);
         constraints.addElement(fn);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_35;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return new SummaryTask(name.image, time, cost,
        nodes, links, constraints);}
    throw new Error("Missing return statement in function");
  }

  final public PlanScript planScript(OntologyDb db) throws ParseException {
Token name, autorun;
ValueFunction cost = null, time = null, fn = null;
Vector nodes = new Vector();
Vector links = new Vector();
Vector constraints = new Vector();
TaskNode node = null;
TaskLink link = null;
    jj_consume_token(LBRACKET);
    jj_consume_token(SCRIPT);
    name = jj_consume_token(ID);
    jj_consume_token(IS_AUTORUN);
    autorun = jj_consume_token(BOOLEAN);
    jj_consume_token(TIME);
    jj_consume_token(LBRACKET);
    time = Expression(db);
    jj_consume_token(RBRACKET);
    jj_consume_token(COST);
    jj_consume_token(LBRACKET);
    cost = Expression(db);
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NODES:
      jj_consume_token(NODES);
      jj_consume_token(LBRACKET);
      label_36:
      while (true) {
        node = taskNode(db);
           nodes.addElement(node);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_36;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINKS:
      jj_consume_token(LINKS);
      jj_consume_token(LBRACKET);
      label_37:
      while (true) {
        link = taskLink();
         links.addElement(link);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_37;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRAINTS:
      jj_consume_token(CONSTRAINTS);
      jj_consume_token(LBRACKET);
      label_38:
      while (true) {
        jj_consume_token(LBRACKET);
        fn = Expression(db);
        jj_consume_token(RBRACKET);
         constraints.addElement(fn);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_38;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return new PlanScript(name.image, (Boolean.valueOf(autorun.image)).booleanValue(),
                           time, cost, nodes, links, constraints);}
    throw new Error("Missing return statement in function");
  }

  final public TaskLink taskLink() throws ParseException {
Token lhs, rhs, larg, rarg, lgrp, rgrp;
    jj_consume_token(LBRACKET);
    jj_consume_token(LEFT_NODE);
    lhs = jj_consume_token(ID);
    jj_consume_token(LEFT_GROUP);
    lgrp = jj_consume_token(ID);
    jj_consume_token(LEFT_ARG);
    larg = jj_consume_token(VARIABLE);
    jj_consume_token(RIGHT_NODE);
    rhs = jj_consume_token(ID);
    jj_consume_token(RIGHT_GROUP);
    rgrp = jj_consume_token(ID);
    jj_consume_token(RIGHT_ARG);
    rarg = jj_consume_token(VARIABLE);
    jj_consume_token(RBRACKET);
     {if (true) return new TaskLink(lhs.image,lgrp.image,larg.image,
                         rhs.image,rgrp.image,rarg.image);}
    throw new Error("Missing return statement in function");
  }

  final public TaskNode taskNode(OntologyDb db) throws ParseException {
Token id, type;
Fact f;
Vector data = new Vector();
TaskNode node = null;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    id = jj_consume_token(ID);
    jj_consume_token(IS_CONDITIONAL);
    type = jj_consume_token(BOOLEAN);
       if ( (Boolean.valueOf(type.image)).booleanValue() )
          node = new ConditionalNode(id.image);
       else
          node = new TaskNode(id.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSUMED_FACTS:
      jj_consume_token(CONSUMED_FACTS);
      jj_consume_token(LBRACKET);
      label_39:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(GROUP);
        id = jj_consume_token(ID);
              data.removeAllElements();
        jj_consume_token(LBRACKET);
        label_40:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[75] = jj_gen;
            break label_40;
          }
          f = fact(db);
                data.addElement(f);
        }
        jj_consume_token(RBRACKET);
              node.setPreconditions(id.image,data);
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[76] = jj_gen;
          break label_39;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRODUCED_FACTS:
      jj_consume_token(PRODUCED_FACTS);
      jj_consume_token(LBRACKET);
      label_41:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(GROUP);
        id = jj_consume_token(ID);
              data.removeAllElements();
        jj_consume_token(LBRACKET);
        label_42:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[78] = jj_gen;
            break label_42;
          }
          f = fact(db);
                data.addElement(f);
        }
        jj_consume_token(RBRACKET);
              node.setPostconditions(id.image,data);
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_41;
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public AbstractTask reteKB(OntologyDb db) throws ParseException {
  ReteKB kb;
  Token t;
  Rule r;
    jj_consume_token(LBRACKET);
    jj_consume_token(BEHAVIOUR);
    t = jj_consume_token(ID);
     kb = new ReteKB(t.image);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_43;
      }
      r = reteRule(db);
        kb.addRule(r);
    }
    jj_consume_token(RBRACKET);
    {if (true) return kb;}
    throw new Error("Missing return statement in function");
  }

  final public Rule reteRule(OntologyDb db) throws ParseException {
  Token t;
  Rule r;
  Pattern p;
  Action a;
    jj_consume_token(LBRACKET);
    t = jj_consume_token(ID);
      r = new Rule(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
         r.setSalience(Integer.parseInt(t.image));
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_44;
      }
      p = retePattern(db);
         r.addPattern(p);
    }
    jj_consume_token(IMPLIES);
    label_45:
    while (true) {
      a = reteAction(db);
         r.addAction(a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_45;
      }
    }
    jj_consume_token(RBRACKET);
      {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Pattern retePattern(OntologyDb db) throws ParseException {
  VarFn id = null;
  Pattern p = null;
  ValueFunction value = null;
  ReteFact rete_fact;
  Token t;
    if (jj_2_9(2)) {
      jj_consume_token(LBRACKET);
      jj_consume_token(TEST);
      value = ConditionalOrExpression(db);
      jj_consume_token(RBRACKET);
      if ( !(value instanceof LogicalFn) && !(value instanceof DefinedFn) &&
           !(value instanceof MethodCallFn) )
         {if (true) throw new ParseException("Non-logical value in rete-test pattern");}
      p = new Pattern(Pattern.TEST,value);
    } else if (jj_2_10(2)) {
      jj_consume_token(LBRACKET);
      jj_consume_token(NEGATION);
      rete_fact = reteFact(db);
      jj_consume_token(RBRACKET);
      p = new Pattern(Pattern.NOT,rete_fact);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case VARIABLE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          t = jj_consume_token(VARIABLE);
          jj_consume_token(FACT_MARKER);
        id = new VarFn(t.image);
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        rete_fact = reteFact(db);
      p = new Pattern(rete_fact);
      if ( id != null ) p.setId(id);
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Vector reteFactList(OntologyDb db) throws ParseException {
  Vector result = new Vector();
  ReteFact f;
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_46;
      }
      f = reteFact(db);
      result.addElement(f);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ReteFact reteFact(OntologyDb db) throws ParseException {
  Token t;
  ReteFact f;
  ValueFunction value;
  String[] attributes = null;
    jj_consume_token(LBRACKET);
    t = jj_consume_token(ID);
        if ( !db.hasFact(t.image) )
           {if (true) throw new ParseException("Rete pattern - fact type " + t.image +
              " not present in current ontology");}
        f = new ReteFact(t.image);
        attributes = db.getNetAttributesOnlyFor(t.image);
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_47;
      }
      jj_consume_token(LBRACKET);
      t = jj_consume_token(ID);
      value = Expression(db);
      jj_consume_token(RBRACKET);
         if ( !Misc.member(t.image,attributes) )
            {if (true) throw new ParseException("Rete pattern: " + t.image +
                                     " is not an attribute of " + f);}
         f.setValue(t.image,value);
    }
    jj_consume_token(RBRACKET);
      {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public void reteGoal(OntologyDb db, Action a) throws ParseException {
  Token t;
  ReteFact f;
  ValueFunction value;
  boolean found = false;
    label_48:
    while (true) {
      jj_consume_token(LBRACKET);
      t = jj_consume_token(ID);
        if ( !Misc.member(t.image,OntologyDb.GOAL_ATTRIBUTES) )
           {if (true) throw new ParseException("Rete goal - attribute " +
              t.image + " not present in current ontology");}
      if (getToken(0).image.equals(OntologyDb.GOAL_FACT)) {
        f = reteFact(db);
           if ( found )
              {if (true) throw new ParseException("Rete goal - attribute " +
                 t.image + " can only be used once");}
           found = true;
           a.head = f;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LE:
        case GE:
        case NE:
        case GT:
        case LT:
        case PLUS:
        case MINUS:
        case NOT:
        case UNOT:
        case LBRACKET:
        case LCURLY:
        case IF:
        case BOOLEAN:
        case ID:
        case INTEGER:
        case REAL:
        case DATE:
        case TIMEFN:
        case LITERAL:
        case VARIABLE:
        case OBJECT:
        case FIELD:
          value = Expression(db);
           a.table.put(t.image,value);
          break;
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_48;
      }
    }
  }

  final public String messageAttribute() throws ParseException {
  String attribute = "";
  Token t = null;
    t = jj_consume_token(ID);
    attribute = t.image;
    label_49:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_49;
      }
      jj_consume_token(MINUS);
      t = jj_consume_token(ID);
      attribute += "-" + t.image;
    }
    {if (true) return attribute;}
    throw new Error("Missing return statement in function");
  }

  final public Action reteAction(OntologyDb db) throws ParseException {
  Token t;
  Action a = null;
  ValueFunction value, value1, value2;
  Vector items = null;
  ReteFact rete_fact;
  String attribute = null;
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSERT:
      jj_consume_token(ASSERT);
      rete_fact = reteFact(db);
         a = new Action(Action.ASSERT);
         a.head = rete_fact;
      break;
    case SEND_MESSAGE:
      jj_consume_token(SEND_MESSAGE);
           a = new Action(Action.MESSAGE);
      label_50:
      while (true) {
        jj_consume_token(LBRACKET);
        attribute = messageAttribute();
        value = Expression(db);
        jj_consume_token(RBRACKET);
              if ( !Misc.member(attribute,Performative.ATTRIBUTE_TYPES) )
                 {if (true) throw new ParseException("Illegal message attribute: " + attribute);}

              a.table.put(attribute,value);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[91] = jj_gen;
          break label_50;
        }
      }
      break;
    case ACHIEVE:
    case BUY:
    case SELL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACHIEVE:
        t = jj_consume_token(ACHIEVE);
               a = new Action(Action.ACHIEVE);
        break;
      case BUY:
        t = jj_consume_token(BUY);
               a = new Action(Action.BUY);
        break;
      case SELL:
        t = jj_consume_token(SELL);
               a = new Action(Action.SELL);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      reteGoal(db,a);
      break;
    case RETRACT:
      t = jj_consume_token(RETRACT);
         a = new Action(t.image);
      label_51:
      while (true) {
        t = jj_consume_token(VARIABLE);
            a.items.addElement(new VarFn(t.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[93] = jj_gen;
          break label_51;
        }
      }
      break;
    case MODIFY:
      jj_consume_token(MODIFY);
      t = jj_consume_token(VARIABLE);
         a = new Action(Action.MODIFY);
         a.head = new VarFn(t.image);
      label_52:
      while (true) {
        jj_consume_token(LBRACKET);
        t = jj_consume_token(ID);
        value = Expression(db);
        jj_consume_token(RBRACKET);
            a.table.put(t.image,value);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[94] = jj_gen;
          break label_52;
        }
      }
      break;
    case PRINT:
    case PRINTLN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
        t = jj_consume_token(PRINT);
        break;
      case PRINTLN:
        t = jj_consume_token(PRINTLN);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = Expression(db);
        a = new Action(t.image);
        a.head = value;
      label_53:
      while (true) {
        value = Expression(db);
            a.items.addElement(value);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LE:
        case GE:
        case NE:
        case GT:
        case LT:
        case PLUS:
        case MINUS:
        case NOT:
        case UNOT:
        case LBRACKET:
        case LCURLY:
        case IF:
        case BOOLEAN:
        case ID:
        case INTEGER:
        case REAL:
        case DATE:
        case TIMEFN:
        case LITERAL:
        case VARIABLE:
        case OBJECT:
        case FIELD:
          ;
          break;
        default:
          jj_la1[96] = jj_gen;
          break label_53;
        }
      }
      break;
    case EXECUTE:
    case CLOSE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXECUTE:
        t = jj_consume_token(EXECUTE);
        break;
      case CLOSE:
        t = jj_consume_token(CLOSE);
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = Expression(db);
         a = new Action(t.image);
         a.head = value;
      break;
    case BIND:
      jj_consume_token(BIND);
      t = jj_consume_token(VARIABLE);
      value = Expression(db);
         a = new Action(Action.BIND);
         a.head = new VarFn(t.image);
         a.sub_head = value;
      break;
    case IF:
      jj_consume_token(IF);
      value = ConditionalOrExpression(db);
      jj_consume_token(THEN);
      items = reteActionList(db);
           if ( !(value instanceof LogicalFn) )
              {if (true) throw new ParseException("Non-logical value in \'if\' expression");}

           a = new Action(Action.IF);
           a.head = value;
           a.items = items;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        items = reteActionList(db);
             a.sub_items = items;
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      value = ConditionalOrExpression(db);
      jj_consume_token(DO);
      items = reteActionList(db);
           if ( !(value instanceof LogicalFn) )
              {if (true) throw new ParseException("Non-logical value in \'while\' expression");}

           a = new Action(Action.WHILE);
           a.head = value;
           a.items = items;
      break;
    case OPEN:
      jj_consume_token(OPEN);
      value = Expression(db);
      value1 = Expression(db);
      value2 = Expression(db);
         a = new Action(Action.OPEN);
         a.head = value;
         a.sub_head = value1;
         a.sub_sub_head = value2;
      break;
    case READ:
    case READLN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
        t = jj_consume_token(READ);
        break;
      case READLN:
        t = jj_consume_token(READLN);
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = Expression(db);
      value1 = Expression(db);
           a = new Action(t.image);
           a.head = value;
           a.sub_head = value1;
      break;
    case SYSTEM_CALL:
      jj_consume_token(SYSTEM_CALL);
        a = new Action(Action.SYSTEM);
      label_54:
      while (true) {
        value = Expression(db);
            a.items.addElement(value);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LE:
        case GE:
        case NE:
        case GT:
        case LT:
        case PLUS:
        case MINUS:
        case NOT:
        case UNOT:
        case LBRACKET:
        case LCURLY:
        case IF:
        case BOOLEAN:
        case ID:
        case INTEGER:
        case REAL:
        case DATE:
        case TIMEFN:
        case LITERAL:
        case VARIABLE:
        case OBJECT:
        case FIELD:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_54;
        }
      }
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Vector retePatternList(OntologyDb db) throws ParseException {
  Vector result = new Vector();
  Pattern p;
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_55;
      }
      p = retePattern(db);
      result.addElement(p);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Vector reteActionList(OntologyDb db) throws ParseException {
  Vector result = new Vector();
  Action a;
    label_56:
    while (true) {
      a = reteAction(db);
      result.addElement(a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_56;
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TaskSummary taskSummary(OntologyDb db) throws ParseException {
AbstractTask t = null;
Token id;
    jj_consume_token(LBRACKET);
    jj_consume_token(TASK);
    t = abstractTask(db);
    jj_consume_token(STATUS);
    id = jj_consume_token(ID);
    jj_consume_token(RBRACKET);
     {if (true) return new TaskSummary(t,id.image);}
    throw new Error("Missing return statement in function");
  }

  final public Ordering ordering() throws ParseException {
Token lhs = null, rhs = null;
    jj_consume_token(LBRACKET);
    jj_consume_token(LHS);
    lhs = jj_consume_token(VARIABLE);
    jj_consume_token(RHS);
    rhs = jj_consume_token(VARIABLE);
    jj_consume_token(RBRACKET);
     {if (true) return new Ordering(lhs.image,rhs.image);}
    throw new Error("Missing return statement in function");
  }

  final public AgentInfo agentInfo(GeneratorModel genmodel,
                    GenerationPlan genplan) throws ParseException {
AgentInfo info = null;
Token id, generate, status, gui, tok;
    jj_consume_token(LBRACKET);
    jj_consume_token(FID);
    id = jj_consume_token(ID);
    jj_consume_token(GENERATE);
    generate = jj_consume_token(BOOLEAN);
    jj_consume_token(STATUS);
    status = jj_consume_token(ID);
    jj_consume_token(HAS_GUI);
    gui = jj_consume_token(BOOLEAN);
     String file = genplan.getOntologyFilename();
     String name = genmodel.getAgentName(id.image);
     info = new AgentInfo(id.image,name,file);
     info.generate = (Boolean.valueOf(generate.image)).booleanValue();
     info.status = status.image;
     info.has_gui = (Boolean.valueOf(gui.image)).booleanValue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      tok = jj_consume_token(LITERAL);
       info.host = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      jj_consume_token(DATABASE);
      tok = jj_consume_token(LITERAL);
       info.database = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZEUS_EXTERNAL:
      jj_consume_token(ZEUS_EXTERNAL);
      tok = jj_consume_token(LITERAL);
       info.zeus_external = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DNS_FILE:
      jj_consume_token(DNS_FILE);
      tok = jj_consume_token(LITERAL);
       info.dns_file = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return info;}
    throw new Error("Missing return statement in function");
  }

  final public DbProxyInfo dbProxyInfo() throws ParseException {
DbProxyInfo info = null;
Token id, gui, tok;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    id = jj_consume_token(ID);
    jj_consume_token(HAS_GUI);
    gui = jj_consume_token(BOOLEAN);
     info = new DbProxyInfo(id.image);
     info.has_gui = (Boolean.valueOf(gui.image)).booleanValue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      tok = jj_consume_token(LITERAL);
       info.host = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZEUS_EXTERNAL:
      jj_consume_token(ZEUS_EXTERNAL);
      tok = jj_consume_token(LITERAL);
       info.zeus_external = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DNS_FILE:
      jj_consume_token(DNS_FILE);
      tok = jj_consume_token(LITERAL);
       info.dns_file = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATH:
      jj_consume_token(PATH);
      tok = jj_consume_token(LITERAL);
       info.path = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return info;}
    throw new Error("Missing return statement in function");
  }

  final public FacilitatorInfo facilitatorInfo(GenerationPlan genplan) throws ParseException {
FacilitatorInfo info = null;
Token id, gui, tok;
double period;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    id = jj_consume_token(ID);
    jj_consume_token(PERIOD);
    period = Real();
    jj_consume_token(HAS_GUI);
    gui = jj_consume_token(BOOLEAN);
     String file = genplan.getOntologyFilename();
     info = new FacilitatorInfo(id.image,file);
     info.period = Double.toString(period);
     info.has_gui = (Boolean.valueOf(gui.image)).booleanValue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      tok = jj_consume_token(LITERAL);
       info.host = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZEUS_EXTERNAL:
      jj_consume_token(ZEUS_EXTERNAL);
      tok = jj_consume_token(LITERAL);
       info.zeus_external = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[113] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DNS_FILE:
      jj_consume_token(DNS_FILE);
      tok = jj_consume_token(LITERAL);
       info.dns_file = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[114] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return info;}
    throw new Error("Missing return statement in function");
  }

  final public VisualiserInfo visualiserInfo(GenerationPlan genplan) throws ParseException {
VisualiserInfo info = null;
Token id, period, gui, tok;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    id = jj_consume_token(ID);
    jj_consume_token(HAS_GUI);
    gui = jj_consume_token(BOOLEAN);
     String file = genplan.getOntologyFilename();
     info = new VisualiserInfo(id.image,file);
     info.has_gui = (Boolean.valueOf(gui.image)).booleanValue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      tok = jj_consume_token(LITERAL);
       info.host = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[115] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZEUS_EXTERNAL:
      jj_consume_token(ZEUS_EXTERNAL);
      tok = jj_consume_token(LITERAL);
       info.zeus_external = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DNS_FILE:
      jj_consume_token(DNS_FILE);
      tok = jj_consume_token(LITERAL);
       info.dns_file = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return info;}
    throw new Error("Missing return statement in function");
  }

  final public NameserverInfo nameserverInfo() throws ParseException {
NameserverInfo info = null;
Token id, root, gui, tok;
double grain;
    jj_consume_token(LBRACKET);
    jj_consume_token(NAME);
    id = jj_consume_token(ID);
    jj_consume_token(IS_ROOT);
    root = jj_consume_token(BOOLEAN);
    jj_consume_token(HAS_GUI);
    gui = jj_consume_token(BOOLEAN);
     info = new NameserverInfo(id.image,
        (Boolean.valueOf(root.image)).booleanValue());
     info.has_gui = (Boolean.valueOf(gui.image)).booleanValue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOST:
      jj_consume_token(HOST);
      tok = jj_consume_token(LITERAL);
       info.host = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZEUS_EXTERNAL:
      jj_consume_token(ZEUS_EXTERNAL);
      tok = jj_consume_token(LITERAL);
       info.zeus_external = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DNS_FILE:
      jj_consume_token(DNS_FILE);
      tok = jj_consume_token(LITERAL);
       info.dns_file = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDRESS_OUTPUT_FILE:
      jj_consume_token(ADDRESS_OUTPUT_FILE);
      tok = jj_consume_token(LITERAL);
       info.address_output_file = Misc.literalToString(tok.image);
      break;
    default:
      jj_la1[121] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIME_GRAIN:
      jj_consume_token(TIME_GRAIN);
      grain = Real();
       info.time_grain = Double.toString(grain);
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
     {if (true) return info;}
    throw new Error("Missing return statement in function");
  }

  final public Vector taskList(OntologyDb db) throws ParseException {
Vector result = new Vector();
AbstractTask t = null;
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_57;
      }
      t = abstractTask(db);
      result.addElement(t);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TaskInfo taskInfo(GeneratorModel genmodel) throws ParseException {
TaskInfo info = null;
Token id, generate, status,external;
    jj_consume_token(LBRACKET);
    jj_consume_token(FID);
    id = jj_consume_token(ID);
    jj_consume_token(GENERATE);
    generate = jj_consume_token(BOOLEAN);
    jj_consume_token(STATUS);
    status = jj_consume_token(ID);
     String name = genmodel.getTaskName(id.image);
     info = new TaskInfo(id.image,name);
     info.generate = (Boolean.valueOf(generate.image)).booleanValue();
     info.status = status.image;
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERNAL:
        ;
        break;
      default:
        jj_la1[124] = jj_gen;
        break label_58;
      }
      jj_consume_token(EXTERNAL);
      external = jj_consume_token(ID);
          info.task_external = external.image;
    }
    jj_consume_token(RBRACKET);
       {if (true) return info;}
    throw new Error("Missing return statement in function");
  }

  final public void generator(FileHandler filer, GeneratorModel genmodel,
               GenerationPlan genplan, OntologyDb db, String dir) throws ParseException {
AgentDescription agent = null;
AbstractTask task = null;
Token version, file, id, name, platform, directory;
AgentInfo agentInfo = null;
TaskInfo taskInfo = null;
NameserverInfo nameserverInfo = null;
FacilitatorInfo facilitatorInfo = null;
VisualiserInfo visualiserInfo = null;
DbProxyInfo dbProxyInfo = null;
String filename;
char sys_char = File.separatorChar;
char zeus_char = SystemProps.getProperty("file.separator").charAt(0);
    jj_consume_token(BEGIN_GENERATOR);
    jj_consume_token(BEGIN_PREAMBLE);
    jj_consume_token(SYSTEM);
    jj_consume_token(LITERAL);
    jj_consume_token(VERSION);
    version = jj_consume_token(LITERAL);
    jj_consume_token(ONTOLOGY);
    file = jj_consume_token(LITERAL);
    jj_consume_token(END_PREAMBLE);
        String ver = Misc.literalToString(version.image);
        if ( !ver.equals(SystemProps.getProperty("version.id")) )
           filer.__setWarning("File and system versions are different");

        filename = Misc.literalToString(file.image);
        filename = filename.replace(zeus_char,sys_char);
        if ( filename.startsWith(".") )
           filename = dir + File.separator + filename;

        int status = db.openFile(new File(filename));
        if ( (status & OntologyDb.ERROR_MASK) != 0 ) {
           filer.__setError("File I/O Error: " + db.getError());
           {if (true) throw new ParseException("Error reading ontology database: " + filename +
                                    "\n" + db.getError());}
        }
        else if ( (status & OntologyDb.WARNING_MASK) != 0 ) {
           filer.__setWarning(db.getWarning());
        }
    jj_consume_token(BEGIN_AGENT_NAME_INDEX);
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[125] = jj_gen;
        break label_59;
      }
      id = jj_consume_token(ID);
      name = jj_consume_token(ID);
         genmodel.addAgentName(id.image,name.image);
    }
    jj_consume_token(END_AGENT_NAME_INDEX);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_AGENT_ICON_INDEX:
      jj_consume_token(BEGIN_AGENT_ICON_INDEX);
      label_60:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[126] = jj_gen;
          break label_60;
        }
        id = jj_consume_token(ID);
        name = jj_consume_token(LITERAL);
          filename = Misc.literalToString(name.image);
          filename = filename.replace(zeus_char,sys_char);
          if ( filename.startsWith(".") )
             filename = dir + File.separator + filename;

           genmodel.setAgentIcon(id.image,filename);
      }
      jj_consume_token(END_AGENT_ICON_INDEX);
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN_TASK_NAME_INDEX);
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_61;
      }
      id = jj_consume_token(ID);
      name = jj_consume_token(ID);
         genmodel.addTaskName(id.image,name.image);
    }
    jj_consume_token(END_TASK_NAME_INDEX);
    jj_consume_token(BEGIN_AGENT_LIST);
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[129] = jj_gen;
        break label_62;
      }
      agent = agentDescription(db);
         genmodel.addAgent(agent);
    }
    jj_consume_token(END_AGENT_LIST);
    jj_consume_token(BEGIN_TASK_LIST);
    label_63:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_63;
      }
      task = abstractTask(db);
         genmodel.addTask(task);
    }
    jj_consume_token(END_TASK_LIST);
    jj_consume_token(BEGIN_GENERATIONPLAN);
    jj_consume_token(BEGIN_PREAMBLE);
    jj_consume_token(PLATFORM);
    platform = jj_consume_token(LITERAL);
    jj_consume_token(DIRECTORY);
    directory = jj_consume_token(LITERAL);
    jj_consume_token(END_PREAMBLE);
         filename = Misc.literalToString(directory.image);
         filename = filename.replace(zeus_char,sys_char);
         if ( filename.startsWith(".") )
            filename = dir +  File.separator + filename;

         genplan.setPlatform(Misc.literalToString(platform.image));
         genplan.setDirectory(filename);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_AGENT_LIST:
      jj_consume_token(BEGIN_AGENT_LIST);
      label_64:
      while (true) {
        agentInfo = agentInfo(genmodel,genplan);
             genplan.setAgent(agentInfo);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[131] = jj_gen;
          break label_64;
        }
      }
      jj_consume_token(END_AGENT_LIST);
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_TASK_LIST:
      jj_consume_token(BEGIN_TASK_LIST);
      label_65:
      while (true) {
        taskInfo = taskInfo(genmodel);
             genplan.setTask(taskInfo);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[133] = jj_gen;
          break label_65;
        }
      }
      jj_consume_token(END_TASK_LIST);
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_NAMESERVER_LIST:
      jj_consume_token(BEGIN_NAMESERVER_LIST);
      label_66:
      while (true) {
        nameserverInfo = nameserverInfo();
             genplan.setNameserver(nameserverInfo);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[135] = jj_gen;
          break label_66;
        }
      }
      jj_consume_token(END_NAMESERVER_LIST);
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_FACILITATOR_LIST:
      jj_consume_token(BEGIN_FACILITATOR_LIST);
      label_67:
      while (true) {
        facilitatorInfo = facilitatorInfo(genplan);
             genplan.setFacilitator(facilitatorInfo);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[137] = jj_gen;
          break label_67;
        }
      }
      jj_consume_token(END_FACILITATOR_LIST);
      break;
    default:
      jj_la1[138] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_VISUALISER_LIST:
      jj_consume_token(BEGIN_VISUALISER_LIST);
      label_68:
      while (true) {
        visualiserInfo = visualiserInfo(genplan);
             genplan.setVisualiser(visualiserInfo);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[139] = jj_gen;
          break label_68;
        }
      }
      jj_consume_token(END_VISUALISER_LIST);
      break;
    default:
      jj_la1[140] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_DBPROXY_LIST:
      jj_consume_token(BEGIN_DBPROXY_LIST);
      label_69:
      while (true) {
        dbProxyInfo = dbProxyInfo();
             genplan.setDbProxy(dbProxyInfo);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[141] = jj_gen;
          break label_69;
        }
      }
      jj_consume_token(END_DBPROXY_LIST);
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
    jj_consume_token(END_GENERATIONPLAN);
    jj_consume_token(END_GENERATOR);
  }

  final public ValueFunction Expression(OntologyDb db) throws ParseException {
ValueFunction fn = null;
    fn = ConditionalOrExpression(db);
    if (jj_2_12(2147483647)) {
      jj_consume_token(TCOLON);
      fn = constraint(fn,db);
    } else {
      ;
    }
    {if (true) return fn;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction ConditionalOrExpression(OntologyDb db) throws ParseException {
ValueFunction x = null, y = null;
    x = ConditionalAndExpression(db);
    label_70:
    while (true) {
      if (jj_2_13(2147483647)) {
        ;
      } else {
        break label_70;
      }
      jj_consume_token(OR);
      y = ConditionalAndExpression(db);
        x = new LogicalOrFn(x,y);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction ConditionalAndExpression(OntologyDb db) throws ParseException {
ValueFunction x = null, y = null;
    x = InclusiveOrExpression(db);
    label_71:
    while (true) {
      if (jj_2_14(2147483647)) {
        ;
      } else {
        break label_71;
      }
      jj_consume_token(AND);
      y = InclusiveOrExpression(db);
        x = new LogicalAndFn(x,y);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction InclusiveOrExpression(OntologyDb db) throws ParseException {
ValueFunction x = null, y = null;
    x = AndExpression(db);
    label_72:
    while (true) {
      if (jj_2_15(2147483647)) {
        ;
      } else {
        break label_72;
      }
      jj_consume_token(UOR);
      y = AndExpression(db);
        x = new OrFn(x,y);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction AndExpression(OntologyDb db) throws ParseException {
ValueFunction x = null, y = null;
    x = RelationalExpression(db);
    label_73:
    while (true) {
      if (jj_2_16(2147483647)) {
        ;
      } else {
        break label_73;
      }
      jj_consume_token(UAND);
      y = RelationalExpression(db);
        x = new AndFn(x,y);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction RelationalExpression(OntologyDb db) throws ParseException {
ValueFunction x = null, y = null;
Token t;
    x = AdditiveExpression(db);
    label_74:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_74;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      y = AdditiveExpression(db);
        x= new ComparisonFn(x,y,t.image);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction AdditiveExpression(OntologyDb db) throws ParseException {
ValueFunction x = null, y = null;
Token t;
    x = MultiplicativeExpression(db);
    label_75:
    while (true) {
      if (jj_2_18(2147483647)) {
        ;
      } else {
        break label_75;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      y = MultiplicativeExpression(db);
        x = new ArithmeticFn(x,y,t.image);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction MultiplicativeExpression(OntologyDb db) throws ParseException {
ValueFunction x = null, y = null;
Token t;
    x = UnaryExpression(db);
    label_76:
    while (true) {
      if (jj_2_19(2147483647)) {
        ;
      } else {
        break label_76;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      case REMAINDER:
        t = jj_consume_token(REMAINDER);
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      y = UnaryExpression(db);
        x = new ArithmeticFn(x,y,t.image);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction UnaryExpression(OntologyDb db) throws ParseException {
ValueFunction x = null, y = null;
Token t;
Fact f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = UnaryExpression(db);
     x = new ArithmeticFn(new IntFn("0"),x,t.image);
      break;
    case NOT:
      jj_consume_token(NOT);
      x = UnaryExpression(db);
     x = new LogicalNotFn(x);
      break;
    case LE:
    case GE:
    case NE:
    case GT:
    case LT:
    case UNOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LT:
        t = jj_consume_token(LT);
        break;
      case UNOT:
        t = jj_consume_token(UNOT);
        break;
      default:
        jj_la1[147] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = UnaryExpression(db);
     x = new ConstraintFn(t.image,x);
      break;
    default:
      jj_la1[148] = jj_gen;
      if (jj_2_21(2)) {
        f = fact(db);
    x = new FactFn(f);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURLY:
        case BOOLEAN:
        case ID:
        case INTEGER:
        case REAL:
        case DATE:
        case TIMEFN:
        case LITERAL:
        case VARIABLE:
        case OBJECT:
        case FIELD:
          x = Literal(db);
          break;
        case IF:
          jj_consume_token(IF);
          x = ConditionalOrExpression(db);
          jj_consume_token(THEN);
          y = Expression(db);
     x = new ImplyFn(x,y);
          if (jj_2_20(2147483647)) {
            jj_consume_token(ELSE);
            y = Expression(db);
        x = new ElseFn(x,y);
          } else {
            ;
          }
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
          x = Expression(db);
          jj_consume_token(RBRACKET);
          break;
        default:
          jj_la1[149] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction Literal(OntologyDb db) throws ParseException {
Token t;
ValueFunction x = null;
Vector data = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
    x = new IntFn(t.image);
      break;
    case REAL:
      t = jj_consume_token(REAL);
    x = new RealFn(t.image);
      break;
    case DATE:
      t = jj_consume_token(DATE);
    x = new DateFn(t.image);
      break;
    case TIMEFN:
      t = jj_consume_token(TIMEFN);
    x = new TimeFn(t.image);
      break;
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
    x = new VarFn(t.image);
      break;
    case OBJECT:
      t = jj_consume_token(OBJECT);
    x = new TypeFn(t.image);
      break;
    case LITERAL:
      t = jj_consume_token(LITERAL);
    x = new IdFn(Misc.literalToString(t.image));
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
    x = BoolFn.newBoolFn(t.image);
      break;
    case LCURLY:
      jj_consume_token(LCURLY);
      data = expression_list(db);
      jj_consume_token(RCURLY);
    x = new VectorFn(data);
      break;
    default:
      jj_la1[150] = jj_gen;
      if (jj_2_22(2)) {
        x = method(db);
      } else if (jj_2_23(2)) {
        x = function(db);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIELD:
          t = jj_consume_token(FIELD);
    x = new FieldFn(t.image);
          break;
        case ID:
          t = jj_consume_token(ID);
    x = new IdFn(t.image);
          break;
        default:
          jj_la1[151] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public Vector expression_list(OntologyDb db) throws ParseException {
Vector data = new Vector();
ValueFunction fn = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LE:
    case GE:
    case NE:
    case GT:
    case LT:
    case PLUS:
    case MINUS:
    case NOT:
    case UNOT:
    case LBRACKET:
    case LCURLY:
    case IF:
    case BOOLEAN:
    case ID:
    case INTEGER:
    case REAL:
    case DATE:
    case TIMEFN:
    case LITERAL:
    case VARIABLE:
    case OBJECT:
    case FIELD:
      fn = Expression(db);
      data.addElement(fn);
      label_77:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[152] = jj_gen;
          break label_77;
        }
        jj_consume_token(COMMA);
        fn = Expression(db);
        data.addElement(fn);
      }
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
    {if (true) return data;}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction function(OntologyDb db) throws ParseException {
Vector data = null;
Token id;
    id = jj_consume_token(ID);
    jj_consume_token(LBRACKET);
    data = expression_list(db);
    jj_consume_token(RBRACKET);
     {if (true) return new DefinedFn(id.image,data);}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction method(OntologyDb db) throws ParseException {
Vector data = null;
Token id;
    id = jj_consume_token(FIELD);
    jj_consume_token(LBRACKET);
    data = expression_list(db);
    jj_consume_token(RBRACKET);
     {if (true) return new MethodCallFn(id.image,data);}
    throw new Error("Missing return statement in function");
  }

  final public ValueFunction constraint(ValueFunction fn, OntologyDb db) throws ParseException {
Vector data = null;
Token id;
    id = jj_consume_token(ID);
    jj_consume_token(LBRACKET);
    data = expression_list(db);
    jj_consume_token(RBRACKET);
     {if (true) return new ConstraintBFn(fn,id.image,data);}
    throw new Error("Missing return statement in function");
  }

  final public double Real() throws ParseException {
Token t;
double x = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
    x = (Double.valueOf(t.image)).doubleValue();
      break;
    case REAL:
      t = jj_consume_token(REAL);
    x = (Double.valueOf(t.image)).doubleValue();
      break;
    default:
      jj_la1[154] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_10();
    jj_save(9, xla);
    return retval;
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_11();
    jj_save(10, xla);
    return retval;
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_12();
    jj_save(11, xla);
    return retval;
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_13();
    jj_save(12, xla);
    return retval;
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_14();
    jj_save(13, xla);
    return retval;
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_15();
    jj_save(14, xla);
    return retval;
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_16();
    jj_save(15, xla);
    return retval;
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_17();
    jj_save(16, xla);
    return retval;
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_18();
    jj_save(17, xla);
    return retval;
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_19();
    jj_save(18, xla);
    return retval;
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_20();
    jj_save(19, xla);
    return retval;
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_21();
    jj_save(20, xla);
    return retval;
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_22();
    jj_save(21, xla);
    return retval;
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_23();
    jj_save(22, xla);
    return retval;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(LE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(NOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SUMMARY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(GT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(TCOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(ACQUAINTANCES)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(LT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_98()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(NEGATION)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(PROTOCOLS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(NE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(UNOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TEST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_97()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(FIELD)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SCRIPT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_96()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(INITIAL_FACTS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(EQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_95()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(LT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_88()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(BOOLEAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TYPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(UAND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(OBJECT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(TIMEFN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(TASKS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(GT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(DATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(REAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(UOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(NE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(PRIMITIVE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(GE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(REMAINDER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(GE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(IF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_113()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(BEHAVIOUR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(LE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(FIELD)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_80()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[155];
  final private int[] jj_la1_0 = {0x80000000,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x80000000,0x981fc000,0x80000000,0x80000000,0x0,0x0,0x80000000,0x0,0x981fc000,0x0,0x0,0x0,0x981fc000,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x7e000,0x180000,0xe00000,0x180000,0x1007c000,0x181fc000,0x80000000,0x0,0x0,0x0,0x981fc000,0x0,};
  final private int[] jj_la1_1 = {0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x402,0x0,0x0,0x0,0x0,0x0,0x0,0x402,0x0,0x1000,0x0,0x402,0x400,0x0,0x0,0x10000000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x10000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x402,0x2,0x0,0x8,0x402,0x0,};
  final private int[] jj_la1_2 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x20000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x200,0x0,0x800,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_3 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x4,0x8,0x20,0x10,0x40,0x80,0x0,0x100,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x4000000,0x0,0x8000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x2000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_4 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x10,0x0,0x20,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x1000,0x0,0x0,0x0,0x800,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7000000,0x0,0x0,0x60000000,0x0,0x800000,0x0,0x0,0x0,0xffe00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_5 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x60,0x0,0x7d,0x0,0x0,0x0,0x200,0x800,0x1000,0x0,0x800,0x1000,0x40000,0x0,0x800,0x1000,0x0,0x800,0x1000,0x0,0x800,0x1000,0x4000,0x8000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_6 = {0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x20000,0x0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x800000,0x0,0x800000,0x800000,0x0,0x0,0x3ff0000,0x0,0x0,0x0,0x800000,0x0,0x0,0x3ff0000,0x0,0x0,0x0,0x3ff0000,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x40,0x0,0x100,0x0,0x400,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x3ff0000,0x1fd0000,0x2020000,0x0,0x3ff0000,0xc0000,};
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 155; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 155; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 155; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 155; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 155; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 155; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[222];
    for (int i = 0; i < 222; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 155; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 222; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
